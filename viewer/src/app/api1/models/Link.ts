/**
 * PDOK Location API
 * PDOK Location API enables searching for features over multiple datasets
 *
 * OpenAPI spec version: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http'

export class Link {
  'href': string
  'hreflang'?: string
  'length'?: number
  'rel': string
  /**
   * Use `true` if the `href` property contains a URI template with variables that needs to be substituted by values to get a URI
   */
  'templated'?: boolean
  'title'?: string
  'type'?: string
  /**
   * Without this parameter you should repeat a link for each media type the resource is offered.  Adding this parameter allows listing alternative media types that you can use for this resource. The value in the `type` parameter becomes the recommended media type.
   */
  'types'?: Array<string>

  static readonly discriminator: string | undefined = undefined

  static readonly mapping: { [index: string]: string } | undefined = undefined

  static readonly attributeTypeMap: Array<{ name: string; baseName: string; type: string; format: string }> = [
    {
      name: 'href',
      baseName: 'href',
      type: 'string',
      format: '',
    },
    {
      name: 'hreflang',
      baseName: 'hreflang',
      type: 'string',
      format: '',
    },
    {
      name: 'length',
      baseName: 'length',
      type: 'number',
      format: '',
    },
    {
      name: 'rel',
      baseName: 'rel',
      type: 'string',
      format: '',
    },
    {
      name: 'templated',
      baseName: 'templated',
      type: 'boolean',
      format: '',
    },
    {
      name: 'title',
      baseName: 'title',
      type: 'string',
      format: '',
    },
    {
      name: 'type',
      baseName: 'type',
      type: 'string',
      format: '',
    },
    {
      name: 'types',
      baseName: 'types',
      type: 'Array<string>',
      format: '',
    },
  ]

  static getAttributeTypeMap() {
    return Link.attributeTypeMap
  }

  public constructor() {}
}
