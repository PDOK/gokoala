/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { FeatureCollectionJsonfg } from '../../models/feature-collection-jsonfg';

export interface Search$Json$Params {

/**
 * The search term(s)
 */
  q: string;

/**
 * When provided the functioneel_gebied collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the functioneel_gebied collection, for example `q=foo&functioneel_gebied[version]=1&functioneel_gebied[relevance]=0.5`
 */
  functioneel_gebied?: {

/**
 * The relevance score of the functioneel_gebied collection.
 */
'relevance'?: number;

/**
 * The version of the functioneel_gebied collection.
 */
'version': number;
};

/**
 * When provided the geografisch_gebied collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the geografisch_gebied collection, for example `q=foo&geografisch_gebied[version]=1&geografisch_gebied[relevance]=0.5`
 */
  geografisch_gebied?: {

/**
 * The relevance score of the geografisch_gebied collection.
 */
'relevance'?: number;

/**
 * The version of the geografisch_gebied collection.
 */
'version': number;
};

/**
 * When provided the ligplaats collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the ligplaats collection, for example `q=foo&ligplaats[version]=1&ligplaats[relevance]=0.5`
 */
  ligplaats?: {

/**
 * The relevance score of the ligplaats collection.
 */
'relevance'?: number;

/**
 * The version of the ligplaats collection.
 */
'version': number;
};

/**
 * When provided the standplaats collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the standplaats collection, for example `q=foo&standplaats[version]=1&standplaats[relevance]=0.5`
 */
  standplaats?: {

/**
 * The relevance score of the standplaats collection.
 */
'relevance'?: number;

/**
 * The version of the standplaats collection.
 */
'version': number;
};

/**
 * When provided the verblijfsobject collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the verblijfsobject collection, for example `q=foo&verblijfsobject[version]=1&verblijfsobject[relevance]=0.5`
 */
  verblijfsobject?: {

/**
 * The relevance score of the verblijfsobject collection.
 */
'relevance'?: number;

/**
 * The version of the verblijfsobject collection.
 */
'version': number;
};

/**
 * When provided the woonplaats collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the woonplaats collection, for example `q=foo&woonplaats[version]=1&woonplaats[relevance]=0.5`
 */
  woonplaats?: {

/**
 * The relevance score of the woonplaats collection.
 */
'relevance'?: number;

/**
 * The version of the woonplaats collection.
 */
'version': number;
};

/**
 * The optional limit parameter limits the number of items that are presented in the response document.
 *
 * Only items are counted that are on the first level of the collection in the response document.
 * Nested objects contained within the explicitly requested items shall not be counted.
 *
 * Minimum = 1. Maximum = 50. Default = 10.
 */
  limit?: number;

/**
 * The coordinate reference system of the geometries in the response. Default is WGS84 longitude/latitude
 */
  crs?: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84' | 'http://www.opengis.net/def/crs/EPSG/0/28992';
}

export function search$Json(http: HttpClient, rootUrl: string, params: Search$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<FeatureCollectionJsonfg>> {
  const rb = new RequestBuilder(rootUrl, search$Json.PATH, 'get');
  if (params) {
    rb.query('q', params.q, {"style":"form","explode":false});
    rb.query('functioneel_gebied', params.functioneel_gebied, {"style":"deepObject","explode":true});
    rb.query('geografisch_gebied', params.geografisch_gebied, {"style":"deepObject","explode":true});
    rb.query('ligplaats', params.ligplaats, {"style":"deepObject","explode":true});
    rb.query('standplaats', params.standplaats, {"style":"deepObject","explode":true});
    rb.query('verblijfsobject', params.verblijfsobject, {"style":"deepObject","explode":true});
    rb.query('woonplaats', params.woonplaats, {"style":"deepObject","explode":true});
    rb.query('limit', params.limit, {"style":"form","explode":false});
    rb.query('crs', params.crs, {"style":"form","explode":false});
  }

  return http.request(
 // rb.build({ responseType: 'json', accept: 'application/vnd.ogc.fg+json', context })

   rb.build({ responseType: 'json', accept: 'application/geo+json', context })

  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<FeatureCollectionJsonfg>;
    })
  );
}

search$Json.PATH = '/search';
