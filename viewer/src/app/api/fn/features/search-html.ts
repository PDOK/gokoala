/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http'
import { Observable } from 'rxjs'
import { filter, map } from 'rxjs/operators'
import { StrictHttpResponse } from '../../strict-http-response'
import { RequestBuilder } from '../../request-builder'

export interface Search$Html$Params {
  /**
   * The search term(s)
   */
  q: string

  /**
   * When provided the functioneel_gebied collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the functioneel_gebied collection, for example `q=foo&functioneel_gebied[version]=1&functioneel_gebied[relevance]=0.5`
   */
  functioneel_gebied?: {
    /**
     * The relevance score of the functioneel_gebied collection.
     */
    relevance?: number

    /**
     * The version of the functioneel_gebied collection.
     */
    version: number
  }

  /**
   * When provided the gemeentegebied collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the gemeentegebied collection, for example `q=foo&gemeentegebied[version]=1&gemeentegebied[relevance]=0.5`
   */
  gemeentegebied?: {
    /**
     * The relevance score of the gemeentegebied collection.
     */
    relevance?: number

    /**
     * The version of the gemeentegebied collection.
     */
    version: number
  }

  /**
   * When provided the geografisch_gebied collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the geografisch_gebied collection, for example `q=foo&geografisch_gebied[version]=1&geografisch_gebied[relevance]=0.5`
   */
  geografisch_gebied?: {
    /**
     * The relevance score of the geografisch_gebied collection.
     */
    relevance?: number

    /**
     * The version of the geografisch_gebied collection.
     */
    version: number
  }

  /**
   * When provided the ligplaats collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the ligplaats collection, for example `q=foo&ligplaats[version]=1&ligplaats[relevance]=0.5`
   */
  ligplaats?: {
    /**
     * The relevance score of the ligplaats collection.
     */
    relevance?: number

    /**
     * The version of the ligplaats collection.
     */
    version: number
  }

  /**
   * When provided the perceel collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the perceel collection, for example `q=foo&perceel[version]=1&perceel[relevance]=0.5`
   */
  perceel?: {
    /**
     * The relevance score of the perceel collection.
     */
    relevance?: number

    /**
     * The version of the perceel collection.
     */
    version: number
  }

  /**
   * When provided the provinciegebied collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the provinciegebied collection, for example `q=foo&provinciegebied[version]=1&provinciegebied[relevance]=0.5`
   */
  provinciegebied?: {
    /**
     * The relevance score of the provinciegebied collection.
     */
    relevance?: number

    /**
     * The version of the provinciegebied collection.
     */
    version: number
  }

  /**
   * When provided the standplaats collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the standplaats collection, for example `q=foo&standplaats[version]=1&standplaats[relevance]=0.5`
   */
  standplaats?: {
    /**
     * The relevance score of the standplaats collection.
     */
    relevance?: number

    /**
     * The version of the standplaats collection.
     */
    version: number
  }

  /**
   * When provided the verblijfsobject collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the verblijfsobject collection, for example `q=foo&verblijfsobject[version]=1&verblijfsobject[relevance]=0.5`
   */
  verblijfsobject?: {
    /**
     * The relevance score of the verblijfsobject collection.
     */
    relevance?: number

    /**
     * The version of the verblijfsobject collection.
     */
    version: number
  }

  /**
   * When provided the woonplaats collection is included in the search. This parameter should be provided as a [deep object](https://swagger.io/docs/specification/v3_0/serialization/#query-parameters) containing the version and relevance of the woonplaats collection, for example `q=foo&woonplaats[version]=1&woonplaats[relevance]=0.5`
   */
  woonplaats?: {
    /**
     * The relevance score of the woonplaats collection.
     */
    relevance?: number

    /**
     * The version of the woonplaats collection.
     */
    version: number
  }

  /**
   * The optional limit parameter limits the number of items that are presented in the response document.
   *
   * Only items are counted that are on the first level of the collection in the response document.
   * Nested objects contained within the explicitly requested items shall not be counted.
   *
   * Minimum = 1. Maximum = 50. Default = 10.
   */
  limit?: number

  /**
   * Only features that have a geometry that intersects the bounding box are selected.
   * The bounding box is provided as four numbers
   * * Lower left corner, coordinate axis 1
   * * Lower left corner, coordinate axis 2
   * * Upper right corner, coordinate axis 1
   * * Upper right corner, coordinate axis 2
   *
   * The coordinate reference system is
   * WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)
   * unless a different coordinate reference system is specified in the parameter `bbox-crs`.
   *
   * The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate
   * Reference Systems by Reference.
   *
   * For WGS 84 longitude/latitude the values are in most cases the sequence of
   * minimum longitude, minimum latitude, maximum longitude and maximum latitude.
   * However, in cases where the box spans the antimeridian the first value
   * (west-most box edge) is larger than the third value (east-most box edge).
   *
   * If a feature has multiple spatial geometry properties, it is the decision of the
   * server whether only a single spatial geometry property is used to determine
   * the extent or all relevant geometries.
   * The given coordinates should be separated by commas.
   */
  bbox?: Array<number>

  /**
   * The coordinate reference system of the `bbox` parameter. Default is WGS84 longitude/latitude.
   */
  'bbox-crs'?: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84' | 'http://www.opengis.net/def/crs/EPSG/0/28992'

  /**
   * The coordinate reference system of the geometries in the response. Default is WGS84 longitude/latitude
   */
  crs?: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84' | 'http://www.opengis.net/def/crs/EPSG/0/28992'
}

export function search$Html(
  http: HttpClient,
  rootUrl: string,
  params: Search$Html$Params,
  context?: HttpContext
): Observable<StrictHttpResponse<string>> {
  const rb = new RequestBuilder(rootUrl, search$Html.PATH, 'get')
  if (params) {
    rb.query('q', params.q, { style: 'form', explode: false })
    rb.query('functioneel_gebied', params.functioneel_gebied, { style: 'deepObject', explode: true })
    rb.query('gemeentegebied', params.gemeentegebied, { style: 'deepObject', explode: true })
    rb.query('geografisch_gebied', params.geografisch_gebied, { style: 'deepObject', explode: true })
    rb.query('ligplaats', params.ligplaats, { style: 'deepObject', explode: true })
    rb.query('perceel', params.perceel, { style: 'deepObject', explode: true })
    rb.query('provinciegebied', params.provinciegebied, { style: 'deepObject', explode: true })
    rb.query('standplaats', params.standplaats, { style: 'deepObject', explode: true })
    rb.query('verblijfsobject', params.verblijfsobject, { style: 'deepObject', explode: true })
    rb.query('woonplaats', params.woonplaats, { style: 'deepObject', explode: true })
    rb.query('limit', params.limit, { style: 'form', explode: false })
    rb.query('bbox', params.bbox, { style: 'form', explode: false })
    rb.query('bbox-crs', params['bbox-crs'], { style: 'form', explode: false })
    rb.query('crs', params.crs, { style: 'form', explode: false })
  }

  return http.request(rb.build({ responseType: 'text', accept: 'text/html', context })).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<string>
    })
  )
}

search$Html.PATH = '/search'
