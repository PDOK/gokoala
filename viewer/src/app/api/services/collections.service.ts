/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Collections } from '../models/collections';
import { getCollections$Html } from '../fn/collections/get-collections-html';
import { GetCollections$Html$Params } from '../fn/collections/get-collections-html';
import { getCollections$Json } from '../fn/collections/get-collections-json';
import { GetCollections$Json$Params } from '../fn/collections/get-collections-json';

@Injectable({ providedIn: 'root' })
export class CollectionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCollections()` */
  static readonly GetCollectionsPath = '/collections';

  /**
   * the collections in the dataset.
   *
   * A list of all collections (geospatial data resources) in this dataset.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCollections$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollections$Json$Response(params?: GetCollections$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Collections>> {
    return getCollections$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * the collections in the dataset.
   *
   * A list of all collections (geospatial data resources) in this dataset.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCollections$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollections$Json(params?: GetCollections$Json$Params, context?: HttpContext): Observable<Collections> {
    return this.getCollections$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Collections>): Collections => r.body)
    );
  }

  /**
   * the collections in the dataset.
   *
   * A list of all collections (geospatial data resources) in this dataset.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCollections$Html()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollections$Html$Response(params?: GetCollections$Html$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getCollections$Html(this.http, this.rootUrl, params, context);
  }

  /**
   * the collections in the dataset.
   *
   * A list of all collections (geospatial data resources) in this dataset.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCollections$Html$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollections$Html(params?: GetCollections$Html$Params, context?: HttpContext): Observable<string> {
    return this.getCollections$Html$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
