/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http'
import { Injectable } from '@angular/core'
import { Observable } from 'rxjs'
import { map } from 'rxjs/operators'

import { BaseService } from '../base-service'
import { ApiConfiguration } from '../api-configuration'
import { StrictHttpResponse } from '../strict-http-response'

import { ConfClasses } from '../models/conf-classes'
import { getConformanceDeclaration$Html } from '../fn/common/get-conformance-declaration-html'
import { GetConformanceDeclaration$Html$Params } from '../fn/common/get-conformance-declaration-html'
import { getConformanceDeclaration$Json } from '../fn/common/get-conformance-declaration-json'
import { GetConformanceDeclaration$Json$Params } from '../fn/common/get-conformance-declaration-json'
import { getLandingPage$Html } from '../fn/common/get-landing-page-html'
import { GetLandingPage$Html$Params } from '../fn/common/get-landing-page-html'
import { getLandingPage$Json } from '../fn/common/get-landing-page-json'
import { GetLandingPage$Json$Params } from '../fn/common/get-landing-page-json'
import { getLandingPage$JsonVersion30 } from '../fn/common/get-landing-page-json-version-30'
import { GetLandingPage$JsonVersion30$Params } from '../fn/common/get-landing-page-json-version-30'
import { getOpenApi } from '../fn/common/get-open-api'
import { GetOpenApi$Params } from '../fn/common/get-open-api'
import { LandingPage } from '../models/landing-page'

@Injectable({ providedIn: 'root' })
export class CommonService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http)
  }

  /** Path part for operation `getLandingPage()` */
  static readonly GetLandingPagePath = '/'

  /**
   * Landing page.
   *
   * The landing page provides links to the API definition and the conformance statements for this API.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLandingPage$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLandingPage$Json$Response(params?: GetLandingPage$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<LandingPage>> {
    return getLandingPage$Json(this.http, this.rootUrl, params, context)
  }

  /**
   * Landing page.
   *
   * The landing page provides links to the API definition and the conformance statements for this API.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLandingPage$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLandingPage$Json(params?: GetLandingPage$Json$Params, context?: HttpContext): Observable<LandingPage> {
    return this.getLandingPage$Json$Response(params, context).pipe(map((r: StrictHttpResponse<LandingPage>): LandingPage => r.body))
  }

  /**
   * Landing page.
   *
   * The landing page provides links to the API definition and the conformance statements for this API.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLandingPage$JsonVersion30()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLandingPage$JsonVersion30$Response(
    params?: GetLandingPage$JsonVersion30$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<LandingPage>> {
    return getLandingPage$JsonVersion30(this.http, this.rootUrl, params, context)
  }

  /**
   * Landing page.
   *
   * The landing page provides links to the API definition and the conformance statements for this API.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLandingPage$JsonVersion30$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLandingPage$JsonVersion30(params?: GetLandingPage$JsonVersion30$Params, context?: HttpContext): Observable<LandingPage> {
    return this.getLandingPage$JsonVersion30$Response(params, context).pipe(
      map((r: StrictHttpResponse<LandingPage>): LandingPage => r.body)
    )
  }

  /**
   * Landing page.
   *
   * The landing page provides links to the API definition and the conformance statements for this API.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLandingPage$Html()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLandingPage$Html$Response(params?: GetLandingPage$Html$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getLandingPage$Html(this.http, this.rootUrl, params, context)
  }

  /**
   * Landing page.
   *
   * The landing page provides links to the API definition and the conformance statements for this API.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLandingPage$Html$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLandingPage$Html(params?: GetLandingPage$Html$Params, context?: HttpContext): Observable<string> {
    return this.getLandingPage$Html$Response(params, context).pipe(map((r: StrictHttpResponse<string>): string => r.body))
  }

  /** Path part for operation `getOpenApi()` */
  static readonly GetOpenApiPath = '/api'

  /**
   * This document.
   *
   * This document
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOpenApi()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOpenApi$Response(params?: GetOpenApi$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getOpenApi(this.http, this.rootUrl, params, context)
  }

  /**
   * This document.
   *
   * This document
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOpenApi$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOpenApi(params?: GetOpenApi$Params, context?: HttpContext): Observable<void> {
    return this.getOpenApi$Response(params, context).pipe(map((r: StrictHttpResponse<void>): void => r.body))
  }

  /** Path part for operation `getConformanceDeclaration()` */
  static readonly GetConformanceDeclarationPath = '/conformance'

  /**
   * API conformance definition.
   *
   * A list of all conformance classes specified in a standard that the server conforms to.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getConformanceDeclaration$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConformanceDeclaration$Json$Response(
    params?: GetConformanceDeclaration$Json$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<ConfClasses>> {
    return getConformanceDeclaration$Json(this.http, this.rootUrl, params, context)
  }

  /**
   * API conformance definition.
   *
   * A list of all conformance classes specified in a standard that the server conforms to.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getConformanceDeclaration$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConformanceDeclaration$Json(params?: GetConformanceDeclaration$Json$Params, context?: HttpContext): Observable<ConfClasses> {
    return this.getConformanceDeclaration$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConfClasses>): ConfClasses => r.body)
    )
  }

  /**
   * API conformance definition.
   *
   * A list of all conformance classes specified in a standard that the server conforms to.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getConformanceDeclaration$Html()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConformanceDeclaration$Html$Response(
    params?: GetConformanceDeclaration$Html$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<string>> {
    return getConformanceDeclaration$Html(this.http, this.rootUrl, params, context)
  }

  /**
   * API conformance definition.
   *
   * A list of all conformance classes specified in a standard that the server conforms to.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getConformanceDeclaration$Html$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConformanceDeclaration$Html(params?: GetConformanceDeclaration$Html$Params, context?: HttpContext): Observable<string> {
    return this.getConformanceDeclaration$Html$Response(params, context).pipe(map((r: StrictHttpResponse<string>): string => r.body))
  }
}
