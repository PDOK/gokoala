/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http'
import { Injectable } from '@angular/core'
import { Observable } from 'rxjs'
import { map } from 'rxjs/operators'

import { BaseService } from '../base-service'
import { ApiConfiguration } from '../api-configuration'
import { StrictHttpResponse } from '../strict-http-response'

import { FeatureCollectionJsonfg } from '../models/feature-collection-jsonfg'
import { search$Html } from '../fn/features/search-html'
import { Search$Html$Params } from '../fn/features/search-html'
import { search$Json } from '../fn/features/search-json'
import { Search$Json$Params } from '../fn/features/search-json'

@Injectable({ providedIn: 'root' })
export class FeaturesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http)
  }

  /** Path part for operation `search()` */
  static readonly SearchPath = '/search'

  /**
   * search features in one or more collections across datasets.
   *
   * This endpoint allows one to implement autocomplete functionality for location search. The `q` parameter accepts a partial location name and will return all matching locations up to the specified `limit`. The list of search results are offered as features (in GeoJSON, JSON-FG) but contain only minimal information; like a feature ID, highlighted text and a bounding box. When you want to get the full feature you must follow the included link (`href`) in the search result. This allows one to retrieve all properties of the feature and the full geometry from the corresponding OGC API.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `search$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  search$Json$Response(params: Search$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<FeatureCollectionJsonfg>> {
    return search$Json(this.http, this.rootUrl, params, context)
  }

  /**
   * search features in one or more collections across datasets.
   *
   * This endpoint allows one to implement autocomplete functionality for location search. The `q` parameter accepts a partial location name and will return all matching locations up to the specified `limit`. The list of search results are offered as features (in GeoJSON, JSON-FG) but contain only minimal information; like a feature ID, highlighted text and a bounding box. When you want to get the full feature you must follow the included link (`href`) in the search result. This allows one to retrieve all properties of the feature and the full geometry from the corresponding OGC API.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `search$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  search$Json(params: Search$Json$Params, context?: HttpContext): Observable<FeatureCollectionJsonfg> {
    return this.search$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<FeatureCollectionJsonfg>): FeatureCollectionJsonfg => r.body)
    )
  }

  /**
   * search features in one or more collections across datasets.
   *
   * This endpoint allows one to implement autocomplete functionality for location search. The `q` parameter accepts a partial location name and will return all matching locations up to the specified `limit`. The list of search results are offered as features (in GeoJSON, JSON-FG) but contain only minimal information; like a feature ID, highlighted text and a bounding box. When you want to get the full feature you must follow the included link (`href`) in the search result. This allows one to retrieve all properties of the feature and the full geometry from the corresponding OGC API.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `search$Html()` instead.
   *
   * This method doesn't expect any request body.
   */
  search$Html$Response(params: Search$Html$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return search$Html(this.http, this.rootUrl, params, context)
  }

  /**
   * search features in one or more collections across datasets.
   *
   * This endpoint allows one to implement autocomplete functionality for location search. The `q` parameter accepts a partial location name and will return all matching locations up to the specified `limit`. The list of search results are offered as features (in GeoJSON, JSON-FG) but contain only minimal information; like a feature ID, highlighted text and a bounding box. When you want to get the full feature you must follow the included link (`href`) in the search result. This allows one to retrieve all properties of the feature and the full geometry from the corresponding OGC API.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `search$Html$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  search$Html(params: Search$Html$Params, context?: HttpContext): Observable<string> {
    return this.search$Html$Response(params, context).pipe(map((r: StrictHttpResponse<string>): string => r.body))
  }
}
