{
  "components": {
    "parameters": {
      "bbox": {
        "description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
        "explode": false,
        "in": "query",
        "name": "bbox",
        "required": false,
        "schema": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "style": "form"
      },
      "bgcolor": {
        "description": "Web color name or hexadecimal 0x[AA]RRGGBB color value for the background color (default to 0x9C9C9C gray). If alpha is not specified, full opacity is assumed.",
        "explode": false,
        "in": "query",
        "name": "bgcolor",
        "required": false,
        "schema": {
          "default": "0xFFFFFF",
          "type": "string"
        },
        "style": "form"
      },
      "collectionId": {
        "description": "local identifier of a collection",
        "explode": false,
        "in": "path",
        "name": "collectionId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "style": "simple"
      },
      "collectionId-all": {
        "description": "Local identifier of a collection",
        "in": "path",
        "name": "collectionId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/all-collections"
        }
      },
      "collectionId-coverage": {
        "allowEmptyValue": false,
        "description": "Local identifier of a coverage collection",
        "explode": false,
        "in": "path",
        "name": "collectionId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/coverage-collections"
        },
        "style": "simple"
      },
      "collectionId-vectorTiles": {
        "allowEmptyValue": false,
        "description": "Local identifier of a vector tile collection",
        "in": "path",
        "name": "collectionId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/vectorTiles-collections"
        }
      },
      "collections": {
        "description": "The collections that should be included in the response. The parameter value is a comma-separated list of collection identifiers. If the parameters is missing, some or all collections will be included. The collection will be rendered in the order specified, with the last one showing on top, unless the priority is overridden by styling rules.",
        "explode": false,
        "in": "query",
        "name": "collections",
        "required": false,
        "schema": {
          "items": {
            "$ref": "#/components/schemas/all-collections"
          },
          "type": "array"
        },
        "style": "form"
      },
      "collections-coverage": {
        "description": "The collections that should be included in the response. The parameter value is a comma-separated list of collection identifiers. If the parameters is missing, some or all collections will be included. The collection will be rendered in the order specified, with the last one showing on top, unless the priority is overridden by styling rules.",
        "explode": false,
        "in": "query",
        "name": "collections",
        "required": false,
        "schema": {
          "items": {
            "$ref": "#/components/schemas/coverage-collections"
          },
          "type": "array"
        },
        "style": "form"
      },
      "collections-vectorTiles": {
        "description": "The collections that should be included in the response. The parameter value is a comma-separated list of collection identifiers. If the parameters is missing, some or all collections will be included. The collection will be rendered in the order specified, with the last one showing on top, unless the priority is overridden by styling rules.",
        "explode": false,
        "in": "query",
        "name": "collections",
        "required": false,
        "schema": {
          "items": {
            "$ref": "#/components/schemas/vectorTiles-collections"
          },
          "type": "array"
        },
        "style": "form"
      },
      "crs": {
        "description": "reproject the output to the given crs",
        "explode": true,
        "in": "query",
        "name": "crs",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "datetime": {
        "description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
        "explode": false,
        "in": "query",
        "name": "datetime",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "f-coverageTile": {
        "description": "The format of the coverage tile response (e.g. tiff). Accepted values are 'tiff' (GeoTIFF), 'netcdf', or 'png'.",
        "explode": false,
        "in": "query",
        "name": "f",
        "required": false,
        "schema": {
          "enum": [
            "tiff",
            "netcdf",
            "png"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "f-mapTile": {
        "description": "The format of the map tile response (e.g. png). Accepted values are 'png', 'jpg' or 'tiff' (GeoTIFF).",
        "explode": false,
        "in": "query",
        "name": "f",
        "required": false,
        "schema": {
          "enum": [
            "png",
            "jpg",
            "tiff"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "f-metadata": {
        "description": "The format of the response. If no value is provided, the accept header is used to determine the format. Accepted values are 'json' or 'html'.",
        "explode": false,
        "in": "query",
        "name": "f",
        "required": false,
        "schema": {
          "enum": [
            "json",
            "html"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "f-vectorTile": {
        "description": "The format of the vector tile response (e.g. json). Accepted values are 'mvt' (Mapbox Vector Tiles) or 'json' (GeoJSON).",
        "explode": false,
        "in": "query",
        "name": "f",
        "required": false,
        "schema": {
          "enum": [
            "mvt",
            "json"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "featureId": {
        "description": "local identifier of a feature",
        "explode": false,
        "in": "path",
        "name": "featureId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "style": "simple"
      },
      "limit": {
        "description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
        "explode": false,
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "default": 10,
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        },
        "style": "form"
      },
      "styleId": {
        "allowEmptyValue": false,
        "description": "An identifier representing a specific style.",
        "in": "path",
        "name": "styleId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/styles"
        }
      },
      "styleId-collection": {
        "allowEmptyValue": false,
        "description": "An identifier representing a specific style.",
        "in": "path",
        "name": "styleId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "subset": {
        "description": "Retrieve only part of the data by slicing or trimming along one or more axis\nFor trimming: {axisAbbrev}({low}:{high}) (preserves dimensionality)\n   An asterisk (`*`) can be used instead of {low} or {high} to indicate the minimum/maximum value.\nFor slicing:  {axisAbbrev}({value})      (reduces dimensionality)\n",
        "explode": false,
        "in": "query",
        "name": "subset",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "subset-crs": {
        "description": "crs for the specified subset",
        "explode": true,
        "in": "query",
        "name": "subset-crs",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "tileCol": {
        "description": "Column index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at WebMercatorQuad tileMatrix=5, tileRow=10 and tileCol=15.",
        "example": 15,
        "in": "path",
        "name": "tileCol",
        "required": true,
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "tileMatrix": {
        "description": "Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,\nIreland is fully within the Tile at WebMercatorQuad tileMatrix=5, tileRow=10 and tileCol=15.",
        "example": "5",
        "in": "path",
        "name": "tileMatrix",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tileMatrixSetId": {
        "allowEmptyValue": false,
        "description": "Identifier for a supported TileMatrixSet",
        "in": "path",
        "name": "tileMatrixSetId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/tileMatrixSets"
        }
      },
      "tileRow": {
        "description": "Row index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully within the Tile at WebMercatorQuad tileMatrix=5, tileRow=10 and tileCol=15.",
        "example": 10,
        "in": "path",
        "name": "tileRow",
        "required": true,
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "transparent": {
        "description": "Background transparency of map (default=true).",
        "explode": false,
        "in": "query",
        "name": "transparent",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        },
        "style": "form"
      }
    },
    "responses": {
      "API": {
        "content": {
          "application/vnd.oai.openapi+json;version=3.0": {
            "schema": {
              "type": "object"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "The OpenAPI definition of the API."
      },
      "Collection": {
        "content": {
          "application/json": {
            "example": {
              "description": "Buildings in the city of Bonn.",
              "extent": {
                "spatial": {
                  "bbox": [
                    [
                      7.01,
                      50.63,
                      7.22,
                      50.78
                    ]
                  ]
                },
                "temporal": {
                  "interval": [
                    [
                      "2010-02-15T12:34:56Z",
                      null
                    ]
                  ]
                }
              },
              "id": "buildings",
              "links": [
                {
                  "href": "http://data.example.org/collections/buildings/items",
                  "rel": "items",
                  "title": "Buildings",
                  "type": "application/geo+json"
                },
                {
                  "href": "http://data.example.org/collections/buildings/items.html",
                  "rel": "items",
                  "title": "Buildings",
                  "type": "text/html"
                },
                {
                  "href": "https://creativecommons.org/publicdomain/zero/1.0/",
                  "rel": "license",
                  "title": "CC0-1.0",
                  "type": "text/html"
                },
                {
                  "href": "https://creativecommons.org/publicdomain/zero/1.0/rdf",
                  "rel": "license",
                  "title": "CC0-1.0",
                  "type": "application/rdf+xml"
                }
              ],
              "title": "Buildings"
            },
            "schema": {
              "$ref": "#/components/schemas/collection"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "Information about the feature collection with id `collectionId`.\n\nThe response contains a link to the items in the collection\n(path `/collections/{collectionId}/items`, link relation `items`)\nas well as key information about the collection. This information\nincludes:\n\n* A local identifier for the collection that is unique for the dataset;\n* A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* An optional title and description for the collection;\n* An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature')."
      },
      "Collections": {
        "content": {
          "application/json": {
            "example": {
              "collections": [
                {
                  "description": "Buildings in the city of Bonn.",
                  "extent": {
                    "spatial": {
                      "bbox": [
                        [
                          7.01,
                          50.63,
                          7.22,
                          50.78
                        ]
                      ]
                    },
                    "temporal": {
                      "interval": [
                        [
                          "2010-02-15T12:34:56Z",
                          null
                        ]
                      ]
                    }
                  },
                  "id": "buildings",
                  "links": [
                    {
                      "href": "http://data.example.org/collections/buildings/items",
                      "rel": "items",
                      "title": "Buildings",
                      "type": "application/geo+json"
                    },
                    {
                      "href": "http://data.example.org/collections/buildings/items.html",
                      "rel": "items",
                      "title": "Buildings",
                      "type": "text/html"
                    },
                    {
                      "href": "https://creativecommons.org/publicdomain/zero/1.0/",
                      "rel": "license",
                      "title": "CC0-1.0",
                      "type": "text/html"
                    },
                    {
                      "href": "https://creativecommons.org/publicdomain/zero/1.0/rdf",
                      "rel": "license",
                      "title": "CC0-1.0",
                      "type": "application/rdf+xml"
                    }
                  ],
                  "title": "Buildings"
                }
              ],
              "links": [
                {
                  "href": "http://data.example.org/collections.json",
                  "rel": "self",
                  "title": "this document",
                  "type": "application/json"
                },
                {
                  "href": "http://data.example.org/collections.html",
                  "rel": "alternate",
                  "title": "this document as HTML",
                  "type": "text/html"
                },
                {
                  "href": "http://schemas.example.org/1.0/buildings.xsd",
                  "rel": "describedby",
                  "title": "GML application schema for Acme Corporation building data",
                  "type": "application/xml"
                },
                {
                  "href": "http://download.example.org/buildings.gpkg",
                  "length": 472546,
                  "rel": "enclosure",
                  "title": "Bulk download (GeoPackage)",
                  "type": "application/geopackage+sqlite3"
                }
              ]
            },
            "schema": {
              "$ref": "#/components/schemas/collections"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "The feature collections shared by this API.\n\nThe dataset is organized as one or more feature collections. This resource\nprovides information about and access to the collections.\n\nThe response contains the list of collections. For each collection, a link\nto the items in the collection (path `/collections/{collectionId}/items`,\nlink relation `items`) as well as key information about the collection.\nThis information includes:\n\n* A local identifier for the collection that is unique for the dataset;\n* A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* An optional title and description for the collection;\n* An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature')."
      },
      "CollectionsList": {
        "content": {
          "application/json": {
            "example": {
              "collections": [
                {
                  "description": "Buildings in the city of Bonn.",
                  "extent": {
                    "spatial": {
                      "bbox": [
                        [
                          7.01,
                          50.63,
                          7.22,
                          50.78
                        ]
                      ]
                    },
                    "temporal": {
                      "interval": [
                        [
                          "2010-02-15T12:34:56Z",
                          null
                        ]
                      ]
                    }
                  },
                  "id": "buildings",
                  "links": [
                    {
                      "href": "http://data.example.org/collections/buildings/items",
                      "rel": "items",
                      "title": "Buildings",
                      "type": "application/geo+json"
                    },
                    {
                      "href": "http://data.example.org/collections/buildings/items.html",
                      "rel": "items",
                      "title": "Buildings",
                      "type": "text/html"
                    },
                    {
                      "href": "https://creativecommons.org/publicdomain/zero/1.0/",
                      "rel": "license",
                      "title": "CC0-1.0",
                      "type": "text/html"
                    },
                    {
                      "href": "https://creativecommons.org/publicdomain/zero/1.0/rdf",
                      "rel": "license",
                      "title": "CC0-1.0",
                      "type": "application/rdf+xml"
                    }
                  ],
                  "title": "Buildings"
                }
              ],
              "links": [
                {
                  "href": "http://data.example.org/collections.json",
                  "rel": "self",
                  "title": "this document",
                  "type": "application/json"
                },
                {
                  "href": "http://data.example.org/collections.html",
                  "rel": "alternate",
                  "title": "this document as HTML",
                  "type": "text/html"
                },
                {
                  "href": "http://schemas.example.org/1.0/buildings.xsd",
                  "rel": "describedby",
                  "title": "GML application schema for Acme Corporation building data",
                  "type": "application/xml"
                },
                {
                  "href": "http://download.example.org/buildings.gpkg",
                  "length": 472546,
                  "rel": "enclosure",
                  "title": "Bulk download (GeoPackage)",
                  "type": "application/geopackage+sqlite3"
                }
              ]
            },
            "schema": {
              "$ref": "#/components/schemas/collections"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "The collections of (mostly geospatial) data available from this API. The dataset contains one or more collections. This resource provides information about and access to the collections. The response contains the list of collections. Each collection is accessible via one or more OGC API set of specifications, for which a link to relevant accessible resources, e.g. /collections/{collectionId}/(items, coverage, map, tiles...) is provided, with the corresponding relation type, as well as key information about the collection. This information includes:\n* a local identifier for the collection that is unique for the dataset;\n* a list of coordinate reference systems (CRS) in which data may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* an optional title and description for the collection;\n* an optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* for collections accessible via the Features or Records API, an optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature')."
      },
      "Conformance": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/confClasses"
                }
              ],
              "example": {
                "conformsTo": [
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30",
                  "http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tilesets-list",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata-tilesets",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/dataset-tilesets",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata-selection",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/jpeg",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/png",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/mvt",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geojson",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tiff",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/netcdf"
                ]
              }
            }
          }
        },
        "description": "The URIs of all conformance classes supported by the server"
      },
      "ConformanceDeclaration": {
        "content": {
          "application/json": {
            "example": {
              "conformsTo": [
                "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core",
                "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30",
                "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html",
                "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson"
              ]
            },
            "schema": {
              "$ref": "#/components/schemas/confClasses"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "The URIs of all conformance classes supported by the server.\n\nTo support \"generic\" clients that want to access multiple\nOGC API Features implementations - and not \"just\" a specific\nAPI / server, the server declares the conformance\nclasses it implements and conforms to."
      },
      "CoverageTile": {
        "content": {
          "application/netcdf": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "image/tiff; application=geotiff": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "description": "A coverage tile returned as a response."
      },
      "EmptyTile": {
        "description": "No data available for this tile."
      },
      "Enumeration": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/enumeration"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "An enumerated list of valid string values for API parameters."
      },
      "Exception": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "An error occured."
      },
      "Feature": {
        "content": {
          "application/geo+json": {
            "example": {
              "geometry": {
                "coordinates": [
                  "..."
                ],
                "type": "Polygon"
              },
              "id": "123",
              "links": [
                {
                  "href": "http://data.example.com/id/building/123",
                  "rel": "canonical",
                  "title": "canonical URI of the building"
                },
                {
                  "href": "http://data.example.com/collections/buildings/items/123.json",
                  "rel": "self",
                  "title": "this document",
                  "type": "application/geo+json"
                },
                {
                  "href": "http://data.example.com/collections/buildings/items/123.html",
                  "rel": "alternate",
                  "title": "this document as HTML",
                  "type": "text/html"
                },
                {
                  "href": "http://data.example.com/collections/buildings",
                  "rel": "collection",
                  "title": "the collection document",
                  "type": "application/geo+json"
                }
              ],
              "properties": {
                "floors": "2",
                "function": "residential",
                "lastUpdate": "2015-08-01T12:34:56Z"
              },
              "type": "Feature"
            },
            "schema": {
              "$ref": "#/components/schemas/featureGeoJSON"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`"
      },
      "Features": {
        "content": {
          "application/geo+json": {
            "example": {
              "features": [
                {
                  "geometry": {
                    "coordinates": [
                      "..."
                    ],
                    "type": "Polygon"
                  },
                  "id": "123",
                  "properties": {
                    "floors": "2",
                    "function": "residential",
                    "lastUpdate": "2015-08-01T12:34:56Z"
                  },
                  "type": "Feature"
                },
                {
                  "geometry": {
                    "coordinates": [
                      "..."
                    ],
                    "type": "Polygon"
                  },
                  "id": "132",
                  "properties": {
                    "floors": "10",
                    "function": "public use",
                    "lastUpdate": "2013-12-03T10:15:37Z"
                  },
                  "type": "Feature"
                }
              ],
              "links": [
                {
                  "href": "http://data.example.com/collections/buildings/items.json",
                  "rel": "self",
                  "title": "this document",
                  "type": "application/geo+json"
                },
                {
                  "href": "http://data.example.com/collections/buildings/items.html",
                  "rel": "alternate",
                  "title": "this document as HTML",
                  "type": "text/html"
                },
                {
                  "href": "http://data.example.com/collections/buildings/items.json\u0026offset=10\u0026limit=2",
                  "rel": "next",
                  "title": "next page",
                  "type": "application/geo+json"
                }
              ],
              "numberMatched": 123,
              "numberReturned": 2,
              "timeStamp": "2018-04-03T14:52:23Z",
              "type": "FeatureCollection"
            },
            "schema": {
              "$ref": "#/components/schemas/featureCollectionGeoJSON"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, the API supports\npaged access with links to the next page, if more features are selected\nthat the page size.\n\nThe `bbox` and `datetime` parameter can be used to select only a\nsubset of the features in the collection (the features that are in the\nbounding box or time interval). The `bbox` parameter matches all features\nin the collection that are not associated with a location, too. The\n`datetime` parameter matches all features in the collection that are\nnot associated with a time stamp or interval, too.\n\nThe `limit` parameter may be used to control the subset of the\nselected features that should be returned in the response, the page size.\nEach page may include information about the number of selected and\nreturned features (`numberMatched` and `numberReturned`) as well as\nlinks to support paging (link relation `next`)."
      },
      "InvalidParameter": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "A query parameter has an invalid value."
      },
      "LandingPage": {
        "content": {
          "application/json": {
            "example": {
              "description": "Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.",
              "links": [
                {
                  "href": "http://data.example.org/",
                  "rel": "self",
                  "title": "this document",
                  "type": "application/json"
                },
                {
                  "href": "http://data.example.org/api",
                  "rel": "service-desc",
                  "title": "the API definition",
                  "type": "application/vnd.oai.openapi+json;version=3.0"
                },
                {
                  "href": "http://data.example.org/api.html",
                  "rel": "service-doc",
                  "title": "the API documentation",
                  "type": "text/html"
                },
                {
                  "href": "http://data.example.org/conformance",
                  "rel": "conformance",
                  "title": "OGC API conformance classes implemented by this server",
                  "type": "application/json"
                },
                {
                  "href": "http://data.example.org/collections",
                  "rel": "data",
                  "title": "Information about the feature collections",
                  "type": "application/json"
                }
              ],
              "title": "Buildings in Bonn"
            },
            "schema": {
              "$ref": "#/components/schemas/landingPage"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "The landing page provides links to the API definition\n(link relations `service-desc` and `service-doc`),\nthe Conformance declaration (path `/conformance`,\nlink relation `conformance`), and the Feature\nCollections (path `/collections`, link relation\n`data`)."
      },
      "MapTile": {
        "content": {
          "image/jpeg": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "image/png": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "image/tiff; application=geotiff": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "description": "A map tile image returned as a response."
      },
      "NotAcceptable": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "Content negotiation failed. For example, the `Accept` header submitted in the request did not support any of the media types supported by the server for the requested resource."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value."
      },
      "ServerError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "A server error occurred."
      },
      "TileMatrixSet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tileMatrixSet"
            }
          }
        },
        "description": "tile matrix set"
      },
      "TileMatrixSetsList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "tileMatrixSets": {
                  "items": {
                    "$ref": "#/components/schemas/tileMatrixSet-item"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "List of tile matrix sets (tiling schemes)."
      },
      "TileSet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tileSet"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "Description of the tileset"
      },
      "TileSetsList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "links": {
                  "items": {
                    "$ref": "#/components/schemas/link"
                  },
                  "type": "array"
                },
                "tilesets": {
                  "items": {
                    "$ref": "#/components/schemas/tileSet-item"
                  },
                  "type": "array"
                }
              },
              "required": [
                "tilesets"
              ],
              "type": "object"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "List of available tilesets."
      },
      "VectorTile": {
        "content": {
          "application/geo+json": {
            "schema": {
              "allOf": [
                {
                  "format": "geojson-feature-collection"
                },
                {
                  "$ref": "#/components/schemas/FeatureCollection"
                }
              ]
            }
          },
          "application/vnd.mapbox-vector-tile": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "description": "A vector tile returned as a response."
      }
    },
    "schemas": {
      "2DBoundingBox": {
        "description": "Minimum bounding rectangle surrounding a 2D resource in the CRS indicated elsewhere",
        "properties": {
          "crs": {
            "$ref": "#/components/schemas/crs"
          },
          "lowerLeft": {
            "$ref": "#/components/schemas/2DPoint"
          },
          "orderedAxes": {
            "items": {
              "type": "string"
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array"
          },
          "upperRight": {
            "$ref": "#/components/schemas/2DPoint"
          }
        },
        "required": [
          "lowerLeft",
          "upperRight"
        ],
        "type": "object"
      },
      "2DPoint": {
        "description": "A 2D Point in the CRS indicated elsewhere",
        "items": {
          "type": "number"
        },
        "maxItems": 2,
        "minItems": 2,
        "type": "array"
      },
      "FeatureCollection": {
        "properties": {
          "bbox": {
            "items": {
              "type": "number"
            },
            "minItems": 4,
            "type": "array"
          },
          "features": {
            "items": {
              "properties": {
                "bbox": {
                  "items": {
                    "type": "number"
                  },
                  "minItems": 4,
                  "type": "array"
                },
                "geometry": {
                  "oneOf": [
                    {
                      "nullable": true,
                      "properties": {
                        "bbox": {
                          "items": {
                            "type": "number"
                          },
                          "minItems": 4,
                          "type": "array"
                        },
                        "coordinates": {
                          "items": {
                            "type": "number"
                          },
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": {
                          "enum": [
                            "Point"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "title": "GeoJSON Point",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "bbox": {
                          "items": {
                            "type": "number"
                          },
                          "minItems": 4,
                          "type": "array"
                        },
                        "coordinates": {
                          "items": {
                            "items": {
                              "type": "number"
                            },
                            "minItems": 2,
                            "type": "array"
                          },
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": {
                          "enum": [
                            "LineString"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "title": "GeoJSON LineString",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "bbox": {
                          "items": {
                            "type": "number"
                          },
                          "minItems": 4,
                          "type": "array"
                        },
                        "coordinates": {
                          "items": {
                            "items": {
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "minItems": 4,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "enum": [
                            "Polygon"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "title": "GeoJSON Polygon",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "bbox": {
                          "items": {
                            "type": "number"
                          },
                          "minItems": 4,
                          "type": "array"
                        },
                        "coordinates": {
                          "items": {
                            "items": {
                              "type": "number"
                            },
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "enum": [
                            "MultiPoint"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "title": "GeoJSON MultiPoint",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "bbox": {
                          "items": {
                            "type": "number"
                          },
                          "minItems": 4,
                          "type": "array"
                        },
                        "coordinates": {
                          "items": {
                            "items": {
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "enum": [
                            "MultiLineString"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "title": "GeoJSON MultiLineString",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "bbox": {
                          "items": {
                            "type": "number"
                          },
                          "minItems": 4,
                          "type": "array"
                        },
                        "coordinates": {
                          "items": {
                            "items": {
                              "items": {
                                "items": {
                                  "type": "number"
                                },
                                "minItems": 2,
                                "type": "array"
                              },
                              "minItems": 4,
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "enum": [
                            "MultiPolygon"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "title": "GeoJSON MultiPolygon",
                      "type": "object"
                    }
                  ]
                },
                "id": {
                  "oneOf": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "properties": {
                  "nullable": true,
                  "type": "object"
                },
                "type": {
                  "enum": [
                    "Feature"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "properties",
                "geometry"
              ],
              "title": "GeoJSON Feature",
              "type": "object"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "FeatureCollection"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "features"
        ],
        "title": "GeoJSON FeatureCollection",
        "type": "object"
      },
      "all-collections": {
        "enum": [
          "blueMarble",
          "NaturalEarth:raster:HYP_HR_SR_OB_DR",
          "NaturalEarth:cultural:ne_10m_admin_0_countries",
          "NaturalEarth:physical:bathymetry",
          "SRTM_ViewFinderPanorama",
          "HRDEM-Ottawa",
          "HRDEM-RedRiver"
        ],
        "type": "string"
      },
      "collection": {
        "properties": {
          "crs": {
            "default": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            ],
            "description": "the list of coordinate reference systems supported by the service",
            "example": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
              "http://www.opengis.net/def/crs/EPSG/0/4326"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "a description of the features in the collection",
            "example": "An address.",
            "type": "string"
          },
          "extent": {
            "$ref": "#/components/schemas/extent"
          },
          "id": {
            "description": "identifier of the collection used, for example, in URIs",
            "example": "address",
            "type": "string"
          },
          "itemType": {
            "default": "feature",
            "description": "indicator about the type of the items in the collection (the default value is 'feature').",
            "type": "string"
          },
          "links": {
            "example": [
              {
                "href": "http://data.example.com/buildings",
                "rel": "item"
              },
              {
                "href": "http://example.com/concepts/buildings.html",
                "rel": "describedby",
                "type": "text/html"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "title": {
            "description": "human readable title of the collection",
            "example": "address",
            "type": "string"
          }
        },
        "required": [
          "id",
          "links"
        ],
        "type": "object"
      },
      "collectionInfo": {
        "properties": {
          "crs": {
            "default": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            ],
            "description": "the list of coordinate reference systems supported by the API; the first item is the default coordinate reference system",
            "example": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
              "http://www.opengis.net/def/crs/EPSG/0/4326"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dataType": {
            "allOf": [
              {
                "description": "Type of data represented in the collection"
              },
              {
                "$ref": "#/components/schemas/dataType"
              }
            ]
          },
          "description": {
            "description": "a description of the data in the collection",
            "example": "A Digital Elevation Model.",
            "type": "string"
          },
          "extent": {
            "$ref": "#/components/schemas/extent-uad"
          },
          "geometryDimension": {
            "description": "The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown",
            "maximum": 3,
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "description": "identifier of the collection used, for example, in URIs",
            "example": "dem",
            "type": "string"
          },
          "itemType": {
            "default": "unknown",
            "description": "indicator about the type of the items in the collection if the collection has an accessible /collections/{collectionId}/items endpoint",
            "type": "string"
          },
          "links": {
            "example": [
              {
                "href": "http://data.example.org/collections/dem?f=json",
                "rel": "self",
                "title": "Digital Elevation Model",
                "type": "application/json"
              },
              {
                "href": "http://data.example.org/collections/dem?f=html",
                "rel": "alternate",
                "title": "Digital Elevation Model",
                "type": "application/json"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage",
                "rel": "coverage",
                "title": "Digital Elevation Model",
                "type": "image/tiff; application=geotiff"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/domainset",
                "rel": "domainset",
                "title": "Digital Elevation Model",
                "type": "application/json"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/rangetype",
                "rel": "rangetype",
                "title": "Digital Elevation Model",
                "type": "application/json"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/metadata",
                "rel": "metadata",
                "title": "Digital Elevation Model",
                "type": "application/json"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "maxCellSize": {
            "description": "Maximum cell size for usage of the collection",
            "type": "number"
          },
          "maxScaleDenominator": {
            "description": "Maximum scale denominator for usage of the collection",
            "type": "number"
          },
          "minCellSize": {
            "description": "Minimum cell size for usage of the collection",
            "type": "number"
          },
          "minScaleDenominator": {
            "description": "Minimum scale denominator for usage of the collection",
            "type": "number"
          },
          "title": {
            "description": "human readable title of the collection",
            "example": "Digital Elevation Model",
            "type": "string"
          }
        },
        "required": [
          "id",
          "links"
        ],
        "type": "object"
      },
      "collections": {
        "properties": {
          "collections": {
            "items": {
              "$ref": "#/components/schemas/collection"
            },
            "type": "array"
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "numberMatched": {
            "example": 1,
            "minimum": 0,
            "type": "integer"
          },
          "numberReturned": {
            "example": 1,
            "minimum": 0,
            "type": "integer"
          },
          "timeStamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "collections",
          "links"
        ],
        "type": "object"
      },
      "confClasses": {
        "properties": {
          "conformsTo": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "conformsTo"
        ],
        "type": "object"
      },
      "coverage-collections": {
        "enum": [
          "SRTM_ViewFinderPanorama",
          "HRDEM-Ottawa",
          "HRDEM-RedRiver"
        ],
        "type": "string"
      },
      "crs": {
        "oneOf": [
          {
            "description": "Simplification of the object into a url if the other properties are not present",
            "type": "string"
          },
          {
            "oneOf": [
              {
                "properties": {
                  "uri": {
                    "description": "Reference to one coordinate reference system (CRS)",
                    "format": "uri",
                    "type": "string"
                  }
                },
                "required": [
                  "uri"
                ]
              },
              {
                "properties": {
                  "wkt": {
                    "allOf": [
                      {
                        "description": "An object defining the CRS using the JSON encoding for Well-known text representation of coordinate reference systems 2.0"
                      },
                      {
                        "type": "object"
                      }
                    ]
                  }
                },
                "required": [
                  "wkt"
                ]
              },
              {
                "properties": {
                  "referenceSystem": {
                    "description": "A reference system data structure as defined in the MD_ReferenceSystem of the ISO 19115",
                    "type": "object"
                  }
                },
                "required": [
                  "referenceSystem"
                ]
              }
            ],
            "type": "object"
          }
        ],
        "title": "CRS"
      },
      "dataType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "enum": [
              "map",
              "vector",
              "coverage"
            ],
            "type": "string"
          }
        ]
      },
      "enumeration": {
        "properties": {
          "enum": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "enum"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "enum"
        ],
        "type": "object"
      },
      "exception": {
        "description": "Information about the exception: an error code plus an optional description.",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "title": "Exception Schema",
        "type": "object"
      },
      "extent": {
        "description": "The extent of the features in the collection. In the Core only spatial and temporal\nextents are specified. Extensions may add additional members to represent other\nextents, for example, thermal or pressure ranges.",
        "properties": {
          "spatial": {
            "$ref": "#/components/schemas/extent_spatial",
            "description": "The spatial extent of the data in the collection.",
            "properties": {
              "bbox": {
                "description": "One or more bounding boxes that describe the spatial extent of the dataset.\nIn the Core only a single bounding box is supported.\n\nExtensions may support additional areas.\nThe first bounding box describes the overall spatial\nextent of the data. All subsequent bounding boxes describe\nmore precise bounding boxes, e.g., to identify clusters of data.\nClients only interested in the overall spatial extent will\nonly need to access the first item in each array.",
                "items": {
                  "description": "Each bounding box is provided as four or six numbers, depending on\nwhether the coordinate reference system includes a vertical axis\n(height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in a parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in a parameter `bbox-crs`.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
                  "example": [
                    -180,
                    -90,
                    180,
                    90
                  ],
                  "items": {
                    "type": "number"
                  },
                  "oneOf": [
                    {
                      "maxItems": 4,
                      "minItems": 4
                    },
                    {
                      "maxItems": 6,
                      "minItems": 6
                    }
                  ],
                  "type": "array"
                },
                "minItems": 1,
                "type": "array"
              },
              "crs": {
                "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
                "description": "Coordinate reference system of the coordinates in the spatial extent\n(property `bbox`). The default reference system is WGS 84 longitude/latitude.\nIn the Core the only other supported coordinate reference system is\nWGS 84 longitude/latitude/ellipsoidal height for coordinates with height.\nExtensions may support additional coordinate reference systems and add\nadditional enum values.",
                "enum": [
                  "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
                  "http://www.opengis.net/def/crs/OGC/0/CRS84h"
                ],
                "type": "string"
              },
              "grid": {
                "description": "Provides information about the limited availability of data within the collection organized\nas a grid (regular or irregular) along each spatial dimension.",
                "items": {
                  "properties": {
                    "cellsCount": {
                      "description": "Number of samples available along the dimension for data organized as a regular grid.\nFor values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_.\nFor values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.",
                      "example": 50,
                      "type": "integer"
                    },
                    "coordinates": {
                      "description": "List of coordinates along the dimension for which data organized as an irregular grid in the collection is available\n(e.g., 2, 10, 80, 100).",
                      "example": [
                        2,
                        10,
                        80,
                        100
                      ],
                      "items": {
                        "oneOf": [
                          {
                            "nullable": true,
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "minItems": 1,
                      "type": "array"
                    },
                    "resolution": {
                      "description": "Resolution of regularly gridded data along the dimension in the collection",
                      "example": 0.0006866455078,
                      "oneOf": [
                        {
                          "nullable": true,
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "maxItems": 3,
                "minItems": 2,
                "type": "array"
              }
            },
            "type": "object"
          },
          "temporal": {
            "$ref": "#/components/schemas/extent_temporal",
            "description": "The temporal extent of the features in the collection.",
            "properties": {
              "grid": {
                "description": "Provides information about the limited availability of data within the collection organized as a grid (regular or irregular) along the temporal dimension.",
                "properties": {
                  "cellsCount": {
                    "description": "Number of samples available along the temporal dimension for data organized as a regular grid.\nFor values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_.\nFor values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.",
                    "example": 50,
                    "type": "integer"
                  },
                  "coordinates": {
                    "description": "List of coordinates along the temporal dimension for which data organized as an irregular grid in the collection is available\n(e.g., \"2017-11-14T09:00Z\",\"2017-11-14T12:00Z\",\"2017-11-14T15:00Z\",\"2017-11-14T18:00Z\",\"2017-11-14T21:00Z\").",
                    "example": [
                      [
                        "2020-11-12T12:15Z",
                        "2020-11-12T12:30Z",
                        "2020-11-12T12:45Z"
                      ]
                    ],
                    "items": {
                      "nullable": true,
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "resolution": {
                    "description": "Resolution of regularly gridded data along the temporal dimension in the collection",
                    "example": "PT1H",
                    "oneOf": [
                      {
                        "nullable": true,
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "interval": {
                "description": "One or more time intervals that describe the temporal extent of the dataset.\nIn the Core only a single time interval is supported.\n\nExtensions may support multiple intervals.\nThe first time interval describes the overall\ntemporal extent of the data. All subsequent time intervals describe\nmore precise time intervals, e.g., to identify clusters of data.\nClients only interested in the overall extent will only need\nto access the first item in each array.",
                "items": {
                  "description": "Begin and end times of the time interval. The timestamps are in the\ntemporal coordinate reference system specified in `trs`. By default\nthis is the Gregorian calendar.\n\nThe value `null` for start or end time is supported and indicates a half-bounded time interval.",
                  "example": [
                    "2011-11-11T12:22:11Z",
                    null
                  ],
                  "items": {
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "minItems": 1,
                "type": "array"
              },
              "trs": {
                "default": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian",
                "description": "Coordinate reference system of the coordinates in the temporal extent\n(property `interval`). The default reference system is the Gregorian calendar.\nIn the Core this is the only supported temporal coordinate reference system.\nExtensions may support additional temporal coordinate reference systems and add\nadditional enum values.",
                "enum": [
                  "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "extent-uad": {
        "allOf": [
          {
            "$ref": "#/components/schemas/extent"
          },
          {
            "additionalProperties": {
              "description": "The domain intervals for any additional dimensions of the extent (envelope) beyond those described in temporal and spatial.",
              "oneOf": [
                {
                  "required": [
                    "interval",
                    "crs"
                  ]
                },
                {
                  "required": [
                    "interval",
                    "trs"
                  ]
                },
                {
                  "required": [
                    "interval",
                    "vrs"
                  ]
                }
              ],
              "properties": {
                "crs": {
                  "description": "generic coordinate reference system suitable for any type of dimensions",
                  "type": "string"
                },
                "grid": {
                  "description": "Provides information about the limited availability of data within the collection organized as a grid (regular or irregular) along the dimension.",
                  "properties": {
                    "cellsCount": {
                      "description": "Number of samples available along the dimension for data organized as a regular grid.\nFor values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_.\nFor values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.",
                      "example": 50,
                      "type": "integer"
                    },
                    "coordinates": {
                      "description": "List of coordinates along the temporal dimension for which data organized as an irregular grid in the collection is available\n(e.g., 2, 10, 80, 100).",
                      "example": [
                        2,
                        10,
                        80,
                        100
                      ],
                      "items": {
                        "oneOf": [
                          {
                            "nullable": true,
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "minItems": 1,
                      "type": "array"
                    },
                    "resolution": {
                      "description": "Resolution of regularly gridded data along the dimension in the collection",
                      "example": [
                        "PT1H",
                        0.0006866455078
                      ],
                      "oneOf": [
                        {
                          "nullable": true,
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "interval": {
                  "description": "One or more intervals that describe the extent for this dimension of the dataset.\nThe value `null` is supported and indicates an unbounded or half-bounded interval.\nThe first interval describes the overall extent of the data for this dimension.\nAll subsequent intervals describe more precise intervals, e.g., to identify clusters of data.\nClients only interested in the overall extent will only need\nto access the first item (a pair of lower and upper bound values).",
                  "items": {
                    "description": "Lower and upper bound values of the interval. The values\nare in the coordinate reference system specified in `crs`, `trs` or `vrs`.",
                    "example": [
                      "2011-11-11T12:22:11Z",
                      32.5,
                      null
                    ],
                    "items": {
                      "oneOf": [
                        {
                          "nullable": true,
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                  },
                  "minItems": 1,
                  "type": "array"
                },
                "trs": {
                  "description": "temporal coordinate reference system (e.g. as defined by Features for 'temporal')",
                  "type": "string"
                },
                "vrs": {
                  "description": "vertical coordinate reference system (e.g. as defined in EDR for 'vertical')",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "object"
          }
        ],
        "description": "The extent module only addresses spatial and temporal extents. This module extends extent by specifying how\nintervals and crs properties can be used to specify additional geometries.",
        "title": "Extent with Uniform Additional Dimensions Schema"
      },
      "extent_spatial": {
        "description": "The spatial extent of the features in the collection.",
        "properties": {
          "bbox": {
            "description": "One or more bounding boxes that describe the spatial extent of the dataset.\nIn the Core only a single bounding box is supported. Extensions may support\nadditional areas. If multiple areas are provided, the union of the bounding\nboxes describes the spatial extent.",
            "items": {
              "description": "Each bounding box is provided as four or six numbers, depending on\nwhether the coordinate reference system includes a vertical axis\n(height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nThe coordinate reference system of the values is WGS 84 longitude/latitude\n(http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate\nreference system is specified in `crs`.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
              "example": [
                -180,
                -90,
                180,
                90
              ],
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "minItems": 1,
            "type": "array"
          },
          "crs": {
            "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "description": "Coordinate reference system of the coordinates in the spatial extent\n(property `bbox`). The default reference system is WGS 84 longitude/latitude.\nIn the Core this is the only supported coordinate reference system.\nExtensions may support additional coordinate reference systems and add\nadditional enum values.",
            "enum": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "extent_temporal": {
        "description": "The temporal extent of the features in the collection.",
        "properties": {
          "interval": {
            "description": "One or more time intervals that describe the temporal extent of the dataset.\nThe value `null` is supported and indicates an unbounded interval end.\nIn the Core only a single time interval is supported. Extensions may support\nmultiple intervals. If multiple intervals are provided, the union of the\nintervals describes the temporal extent.",
            "items": {
              "description": "Begin and end times of the time interval. The timestamps are in the\ntemporal coordinate reference system specified in `trs`. By default\nthis is the Gregorian calendar.",
              "example": [
                "2011-11-11T12:22:11Z",
                null
              ],
              "items": {
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "minItems": 1,
            "type": "array"
          },
          "trs": {
            "default": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian",
            "description": "Coordinate reference system of the coordinates in the temporal extent\n(property `interval`). The default reference system is the Gregorian calendar.\nIn the Core this is the only supported temporal coordinate reference system.\nExtensions may support additional temporal coordinate reference systems and add\nadditional enum values.",
            "enum": [
              "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "featureCollectionGeoJSON": {
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/featureGeoJSON"
            },
            "type": "array"
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "numberMatched": {
            "$ref": "#/components/schemas/numberMatched"
          },
          "numberReturned": {
            "$ref": "#/components/schemas/numberReturned"
          },
          "timeStamp": {
            "$ref": "#/components/schemas/timeStamp"
          },
          "type": {
            "enum": [
              "FeatureCollection"
            ],
            "type": "string"
          }
        },
        "required": [
          "features",
          "type"
        ],
        "type": "object"
      },
      "featureGeoJSON": {
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/geometryGeoJSON"
          },
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "properties": {
            "nullable": true,
            "type": "object"
          },
          "type": {
            "enum": [
              "Feature"
            ],
            "type": "string"
          }
        },
        "required": [
          "geometry",
          "properties",
          "type"
        ],
        "type": "object"
      },
      "geometryGeoJSON": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/pointGeoJSON"
          },
          {
            "$ref": "#/components/schemas/multipointGeoJSON"
          },
          {
            "$ref": "#/components/schemas/linestringGeoJSON"
          },
          {
            "$ref": "#/components/schemas/multilinestringGeoJSON"
          },
          {
            "$ref": "#/components/schemas/polygonGeoJSON"
          },
          {
            "$ref": "#/components/schemas/multipolygonGeoJSON"
          },
          {
            "$ref": "#/components/schemas/geometrycollectionGeoJSON"
          }
        ]
      },
      "geometrycollectionGeoJSON": {
        "properties": {
          "geometries": {
            "items": {
              "$ref": "#/components/schemas/geometryGeoJSON"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "GeometryCollection"
            ],
            "type": "string"
          }
        },
        "required": [
          "geometries",
          "type"
        ],
        "type": "object"
      },
      "landingPage": {
        "properties": {
          "attribution": {
            "description": "The `attribution` should be short and intended for presentation to a user, for example, in a corner of a map. Parts of the text can be links to other resources if additional information is needed. The string can include HTML markup.",
            "title": "attribution for the API",
            "type": "string"
          },
          "description": {
            "example": "Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.",
            "type": "string"
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "title": {
            "description": "While a title is not required, implementors are strongly advised to include one.",
            "example": "Buildings in Bonn",
            "title": "The title of the API.",
            "type": "string"
          }
        },
        "required": [
          "links"
        ],
        "type": "object"
      },
      "linestringGeoJSON": {
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "type": "array"
            },
            "minItems": 2,
            "type": "array"
          },
          "type": {
            "enum": [
              "LineString"
            ],
            "type": "string"
          }
        },
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object"
      },
      "link": {
        "properties": {
          "href": {
            "description": "Supplies the URI to a remote resource (or resource fragment).",
            "example": "http://data.example.com/buildings/123",
            "type": "string"
          },
          "hreflang": {
            "description": "A hint indicating what the language of the result of dereferencing the link should be.",
            "example": "en",
            "type": "string"
          },
          "length": {
            "type": "integer"
          },
          "rel": {
            "description": "The type or semantics of the relation.",
            "example": "alternate",
            "type": "string"
          },
          "templated": {
            "description": "This flag set to true if the link is a URL template.",
            "type": "boolean"
          },
          "title": {
            "description": "Used to label the destination of a link such that it can be used as a human-readable identifier.",
            "example": "Trierer Strasse 70, 53115 Bonn",
            "type": "string"
          },
          "type": {
            "description": "A hint indicating what the media type of the result of dereferencing the link should be.",
            "example": "application/geo+json",
            "type": "string"
          },
          "varBase": {
            "description": "A base path to retrieve semantic information about the variables used in URL template.",
            "example": "/ogcapi/vars/",
            "type": "string"
          }
        },
        "required": [
          "href"
        ],
        "type": "object"
      },
      "multilinestringGeoJSON": {
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "minItems": 2,
                "type": "array"
              },
              "minItems": 2,
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "MultiLineString"
            ],
            "type": "string"
          }
        },
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object"
      },
      "multipointGeoJSON": {
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "MultiPoint"
            ],
            "type": "string"
          }
        },
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object"
      },
      "multipolygonGeoJSON": {
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "minItems": 2,
                  "type": "array"
                },
                "minItems": 4,
                "type": "array"
              },
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "MultiPolygon"
            ],
            "type": "string"
          }
        },
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object"
      },
      "numberMatched": {
        "description": "The number of features of the feature type that match the selection\nparameters like `bbox`.",
        "example": 127,
        "minimum": 0,
        "type": "integer"
      },
      "numberReturned": {
        "description": "The number of features in the feature collection.\n\nA server may omit this information in a response, if the information\nabout the number of features is not known or difficult to compute.\n\nIf the value is provided, the value shall be identical to the number\nof items in the \"features\" array.",
        "example": 10,
        "minimum": 0,
        "type": "integer"
      },
      "pointGeoJSON": {
        "properties": {
          "coordinates": {
            "items": {
              "type": "number"
            },
            "minItems": 2,
            "type": "array"
          },
          "type": {
            "enum": [
              "Point"
            ],
            "type": "string"
          }
        },
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object"
      },
      "polygonGeoJSON": {
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "minItems": 2,
                "type": "array"
              },
              "minItems": 4,
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "Polygon"
            ],
            "type": "string"
          }
        },
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object"
      },
      "styles": {
        "enum": [
          "default"
        ],
        "type": "string"
      },
      "tileMatrixLimits": {
        "description": "The limits for an individual tile matrix of a TileSet's TileMatrixSet, as defined in the OGC 2D TileMatrixSet and TileSet Metadata Standard",
        "properties": {
          "maxTileCol": {
            "minimum": 0,
            "type": "integer"
          },
          "maxTileRow": {
            "minimum": 0,
            "type": "integer"
          },
          "minTileCol": {
            "minimum": 0,
            "type": "integer"
          },
          "minTileRow": {
            "minimum": 0,
            "type": "integer"
          },
          "tileMatrix": {
            "type": "string"
          }
        },
        "required": [
          "tileMatrix",
          "minTileRow",
          "maxTileRow",
          "minTileCol",
          "maxTileCol"
        ],
        "title": "TileMatrixLimits",
        "type": "object"
      },
      "tileMatrixSet": {
        "description": "A definition of a tile matrix set following the Tile Matrix Set standard. For tileset metadata, such a description (in `tileMatrixSet` property) is only required for offline use, as an alternative to a link with a `http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme` relation type.",
        "properties": {
          "boundingBox": {
            "allOf": [
              {
                "description": "Minimum bounding rectangle surrounding the tile matrix set, in the supported CRS"
              },
              {
                "$ref": "#/components/schemas/2DBoundingBox"
              }
            ]
          },
          "crs": {
            "allOf": [
              {
                "description": "Coordinate Reference System (CRS)"
              },
              {
                "$ref": "#/components/schemas/crs"
              }
            ]
          },
          "description": {
            "description": "Brief narrative description of this tile matrix set, normally available for display to a human",
            "type": "string"
          },
          "id": {
            "description": "Tile matrix set identifier. Implementation of 'identifier'",
            "type": "string"
          },
          "keywords": {
            "description": "Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this tile matrix set",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "orderedAxes": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "tileMatrices": {
            "description": "Describes scale levels and its tile matrices",
            "items": {
              "description": "A tile matrix, usually corresponding to a particular zoom level of a TileMatrixSet.",
              "properties": {
                "cellSize": {
                  "description": "Cell size of this tile matrix",
                  "type": "number"
                },
                "cornerOfOrigin": {
                  "default": "topLeft",
                  "description": "The corner of the tile matrix (_topLeft_ or _bottomLeft_) used as the origin for numbering tile rows and columns. This corner is also a corner of the (0, 0) tile.",
                  "enum": [
                    "topLeft",
                    "bottomLeft"
                  ],
                  "type": "string"
                },
                "description": {
                  "description": "Brief narrative description of this tile matrix set, normally available for display to a human",
                  "type": "string"
                },
                "id": {
                  "description": "Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. Implementation of 'identifier'",
                  "type": "string"
                },
                "keywords": {
                  "description": "Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this dataset",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "matrixHeight": {
                  "description": "Width of the matrix (number of tiles in width)",
                  "format": "integer",
                  "minimum": 1,
                  "multipleOf": 1,
                  "type": "number"
                },
                "matrixWidth": {
                  "description": "Height of the matrix (number of tiles in height)",
                  "format": "integer",
                  "minimum": 1,
                  "multipleOf": 1,
                  "type": "number"
                },
                "pointOfOrigin": {
                  "allOf": [
                    {
                      "description": "Precise position in CRS coordinates of the corner of origin (e.g. the top-left corner) for this tile matrix. This position is also a corner of the (0, 0) tile. In previous version, this was 'topLeftCorner' and 'cornerOfOrigin' did not exist."
                    },
                    {
                      "$ref": "#/components/schemas/2DPoint"
                    }
                  ]
                },
                "scaleDenominator": {
                  "description": "Scale denominator of this tile matrix",
                  "type": "number"
                },
                "tileHeight": {
                  "description": "Height of each tile of this tile matrix in pixels",
                  "format": "integer",
                  "minimum": 1,
                  "multipleOf": 1,
                  "type": "number"
                },
                "tileWidth": {
                  "description": "Width of each tile of this tile matrix in pixels",
                  "format": "integer",
                  "minimum": 1,
                  "multipleOf": 1,
                  "type": "number"
                },
                "title": {
                  "description": "Title of this tile matrix, normally used for display to a human",
                  "type": "string"
                },
                "variableMatrixWidths": {
                  "description": "Describes the rows that has variable matrix width",
                  "items": {
                    "description": "Variable Matrix Width data structure",
                    "properties": {
                      "coalesce": {
                        "description": "Number of tiles in width that coalesce in a single tile for these rows",
                        "format": "integer",
                        "minimum": 2,
                        "multipleOf": 1,
                        "type": "number"
                      },
                      "maxTileRow": {
                        "description": "Last tile row where the coalescence factor applies for this tilematrix",
                        "format": "integer",
                        "minimum": 0,
                        "multipleOf": 1,
                        "type": "number"
                      },
                      "minTileRow": {
                        "description": "First tile row where the coalescence factor applies for this tilematrix",
                        "format": "integer",
                        "minimum": 0,
                        "multipleOf": 1,
                        "type": "number"
                      }
                    },
                    "required": [
                      "coalesce",
                      "minTileRow",
                      "maxTileRow"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "id",
                "scaleDenominator",
                "cellSize",
                "pointOfOrigin",
                "tileWidth",
                "tileHeight",
                "matrixWidth",
                "matrixHeight"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "title": {
            "description": "Title of this tile matrix set, normally used for display to a human",
            "type": "string"
          },
          "uri": {
            "description": "Reference to an official source for this tileMatrixSet",
            "format": "uri",
            "type": "string"
          },
          "wellKnownScaleSet": {
            "description": "Reference to a well-known scale set",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "crs",
          "tileMatrices"
        ],
        "title": "Tile Matrix Set Definition",
        "type": "object"
      },
      "tileMatrixSet-item": {
        "description": "A minimal tile matrix set element for use within a list of tile matrix sets linking to a full definition.",
        "properties": {
          "crs": {
            "allOf": [
              {
                "description": "Coordinate Reference System (CRS)"
              },
              {
                "$ref": "#/components/schemas/crs"
              }
            ]
          },
          "id": {
            "description": "Optional local tile matrix set identifier, e.g. for use as unspecified `{tileMatrixSetId}` parameter. Implementation of 'identifier'",
            "type": "string"
          },
          "links": {
            "description": "Links to related resources. A 'self' link to the tile matrix set definition is required.",
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "title": {
            "description": "Title of this tile matrix set, normally used for display to a human",
            "type": "string"
          },
          "uri": {
            "description": "Reference to an official source for this tileMatrixSet",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "links"
        ],
        "title": "Tile Matrix Set Item",
        "type": "object"
      },
      "tileMatrixSets": {
        "enum": [
          "WebMercatorQuad",
          "WorldCRS84Quad",
          "GNOSISGlobalGrid",
          "WorldMercatorWGS84Quad"
        ],
        "type": "string"
      },
      "tileSet": {
        "description": "A resource describing a tileset based on the OGC TileSet Metadata Standard. At least one of the 'TileMatrixSet',  or a link with 'rel' http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme",
        "properties": {
          "accessConstraints": {
            "default": "unclassified",
            "description": "Restrictions on the availability of the Tile Set that the user needs to be aware of before using or redistributing the Tile Set",
            "enum": [
              "unclassified",
              "restricted",
              "confidential",
              "secret",
              "topSecret"
            ],
            "type": "string"
          },
          "attribution": {
            "description": "Short reference to recognize the author or provider",
            "type": "string"
          },
          "boundingBox": {
            "allOf": [
              {
                "description": "Minimum bounding rectangle surrounding the tile matrix set, in the supported CRS"
              },
              {
                "$ref": "#/components/schemas/2DBoundingBox"
              }
            ]
          },
          "centerPoint": {
            "allOf": [
              {
                "description": "Location of a tile that nicely represents the tileset. Implementations may use this center value to set the default location or to present a representative tile in a user interface"
              },
              {
                "properties": {
                  "cellSize": {
                    "description": "Cell size of the tile matrix selected",
                    "type": "number"
                  },
                  "coordinates": {
                    "items": {
                      "type": "number"
                    },
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                  },
                  "crs": {
                    "allOf": [
                      {
                        "description": "Coordinate Reference System (CRS) of the coordinates"
                      },
                      {
                        "$ref": "#/components/schemas/crs"
                      }
                    ]
                  },
                  "scaleDenominator": {
                    "description": "Scale denominator of the tile matrix selected",
                    "type": "number"
                  },
                  "tileMatrix": {
                    "description": "TileMatrix identifier associated with the scaleDenominator",
                    "type": "string"
                  }
                },
                "required": [
                  "coordinates"
                ],
                "type": "object"
              }
            ]
          },
          "created": {
            "allOf": [
              {
                "description": "When the Tile Set was first produced"
              },
              {
                "$ref": "#/components/schemas/timeStamp"
              }
            ]
          },
          "crs": {
            "allOf": [
              {
                "description": "Coordinate Reference System (CRS)"
              },
              {
                "$ref": "#/components/schemas/crs"
              }
            ]
          },
          "dataType": {
            "allOf": [
              {
                "description": "Type of data represented in the tileset"
              },
              {
                "$ref": "#/components/schemas/dataType"
              }
            ]
          },
          "description": {
            "description": "Brief narrative description of this tile set",
            "type": "string"
          },
          "epoch": {
            "description": "Epoch of the Coordinate Reference System (CRS)",
            "type": "number"
          },
          "keywords": {
            "description": "keywords about this tileset",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "layers": {
            "items": {
              "properties": {
                "attribution": {
                  "description": "Short reference to recognize the author or provider",
                  "type": "string"
                },
                "boundingBox": {
                  "allOf": [
                    {
                      "description": "Minimum bounding rectangle surrounding the layer"
                    },
                    {
                      "$ref": "#/components/schemas/2DBoundingBox"
                    }
                  ]
                },
                "created": {
                  "allOf": [
                    {
                      "description": "When the layer was first produced"
                    },
                    {
                      "$ref": "#/components/schemas/timeStamp"
                    }
                  ]
                },
                "crs": {
                  "allOf": [
                    {
                      "description": "Coordinate Reference System (CRS)"
                    },
                    {
                      "$ref": "#/components/schemas/crs"
                    }
                  ]
                },
                "dataType": {
                  "allOf": [
                    {
                      "description": "Type of data represented in the layer"
                    },
                    {
                      "$ref": "#/components/schemas/dataType"
                    }
                  ]
                },
                "description": {
                  "description": "Brief narrative description of this tile matrix set, normally available for display to a human",
                  "type": "string"
                },
                "epoch": {
                  "description": "Epoch of the Coordinate Reference System (CRS)",
                  "type": "number"
                },
                "featureType": {
                  "description": "Feature type identifier. Only applicable to layers of datatype 'geometries'",
                  "type": "string"
                },
                "geoDataClasses": {
                  "description": "URI identifying a class of data contained in this layer (useful to determine compatibility with styles or processes)",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "geometryDimension": {
                  "description": "The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown",
                  "maximum": 3,
                  "minimum": 0,
                  "type": "integer"
                },
                "id": {
                  "description": "Unique identifier of the Layer. Implementation of 'identifier'",
                  "type": "string"
                },
                "keywords": {
                  "description": "Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this layer",
                  "type": "string"
                },
                "license": {
                  "description": "License applicable to the tiles",
                  "type": "string"
                },
                "links": {
                  "description": "Links related to this layer. Possible link 'rel' values are: 'geodata' for a URL pointing to the collection of geospatial data.",
                  "items": {
                    "$ref": "#/components/schemas/link"
                  },
                  "minItems": 1,
                  "type": "array"
                },
                "maxCellSize": {
                  "description": "Maximum cell size for usage of the layer",
                  "type": "number"
                },
                "maxScaleDenominator": {
                  "description": "Maximum scale denominator for usage of the layer",
                  "type": "number"
                },
                "maxTileMatrix": {
                  "description": "TileMatrix identifier associated with the minScaleDenominator",
                  "type": "string"
                },
                "minCellSize": {
                  "description": "Minimum cell size for usage of the layer",
                  "type": "number"
                },
                "minScaleDenominator": {
                  "description": "Minimum scale denominator for usage of the layer",
                  "type": "number"
                },
                "minTileMatrix": {
                  "description": "TileMatrix identifier associated with the maxScaleDenominator",
                  "type": "string"
                },
                "pointOfContact": {
                  "description": "Useful information to contact the authors or custodians for the layer (e.g. e-mail address, a physical address,  phone numbers, etc)",
                  "type": "string"
                },
                "propertiesSchema": {
                  "allOf": [
                    {
                      "description": "Properties represented by the features in this layer. Can be the attributes of a feature dataset (datatype=geometries) or the rangeType of a coverage (datatype=coverage)"
                    },
                    {
                      "description": "Attributes of the features or rangetypes of a coverage. Defined by a subset of the JSON Schema for the properties of a feature",
                      "properties": {
                        "properties": {
                          "additionalProperties": {
                            "description": "No property names are defined but any property name they should be described by JSON Schema. So 'additionalProperties' implements 'name'.",
                            "properties": {
                              "contentMediaType": {
                                "description": "Implements 'mediaType'",
                                "type": "string"
                              },
                              "description": {
                                "description": "Implements 'description'",
                                "type": "string"
                              },
                              "enum": {
                                "description": "Implements 'acceptedValues'",
                                "items": {},
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true
                              },
                              "exclusiveMaximum": {
                                "description": "Implements 'range'",
                                "type": "number"
                              },
                              "exclusiveMinimum": {
                                "description": "Implements 'range'",
                                "type": "number"
                              },
                              "format": {
                                "description": "Complements implementation of 'type'",
                                "type": "string"
                              },
                              "maxItems": {
                                "description": "Implements 'upperMultiplicity'",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "maximum": {
                                "description": "Implements 'range'",
                                "type": "number"
                              },
                              "minItems": {
                                "default": 0,
                                "description": "Implements 'lowerMultiplicity'",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "minimum": {
                                "description": "Implements 'range'",
                                "type": "number"
                              },
                              "observedProperty": {
                                "type": "string"
                              },
                              "observedPropertyURI": {
                                "format": "uri",
                                "type": "string"
                              },
                              "pattern": {
                                "format": "regex",
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "array",
                                  "boolean",
                                  "integer",
                                  "null",
                                  "number",
                                  "object",
                                  "string"
                                ],
                                "type": "string"
                              },
                              "uom": {
                                "type": "string"
                              },
                              "uomURI": {
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "default": {},
                          "type": "object"
                        },
                        "required": {
                          "description": "Implements 'multiplicity' by citing property 'name' defined as 'additionalProperties'",
                          "items": {
                            "type": "string"
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "type": {
                          "enum": [
                            "object"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "properties"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "publisher": {
                  "description": "Organization or individual responsible for making the layer available",
                  "type": "string"
                },
                "style": {
                  "allOf": [
                    {
                      "description": "Style used to generate the layer in the tileset"
                    },
                    {
                      "$ref": "#/components/schemas/tileSet/properties/style/allOf/1"
                    }
                  ]
                },
                "theme": {
                  "description": "Category where the layer can be grouped",
                  "type": "string"
                },
                "title": {
                  "description": "Title of this tile matrix set, normally used for display to a human",
                  "type": "string"
                },
                "updated": {
                  "allOf": [
                    {
                      "description": "Last layer change/revision"
                    },
                    {
                      "$ref": "#/components/schemas/timeStamp"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "dataType"
              ],
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          },
          "license": {
            "description": "License applicable to the tiles",
            "type": "string"
          },
          "links": {
            "description": "Links to related resources. Possible link 'rel' values are: 'http://www.opengis.net/def/rel/ogc/1.0/dataset' for a URL pointing to the dataset, 'item' for a URL template to get a tile; 'alternate' for a URL pointing to another representation of the TileSetMetadata (e.g a TileJSON file); 'http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme' for a definition of the TileMatrixSet; 'http://www.opengis.net/def/rel/ogc/1.0/geodata' for pointing to a single collection (if the tileset represents a single collection)",
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "mediaTypes": {
            "description": "Media types available for the tiles",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pointOfContact": {
            "description": "Useful information to contact the authors or custodians for the Tile Set",
            "type": "string"
          },
          "style": {
            "allOf": [
              {
                "description": "Style involving all layers used to generate the tileset"
              },
              {
                "properties": {
                  "description": {
                    "description": "Brief narrative description of this style",
                    "type": "string"
                  },
                  "id": {
                    "description": "An identifier for this style. Implementation of 'identifier'",
                    "type": "string"
                  },
                  "keywords": {
                    "description": "keywords about this style",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "links": {
                    "description": "Links to style related resources. Possible link 'rel' values are: 'style' for a URL pointing to the style description, 'styleSpec' for a URL pointing to the specification or standard used to define the style.",
                    "items": {
                      "$ref": "#/components/schemas/link"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "title": {
                    "description": "A title for this style",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            ]
          },
          "tileMatrixSetLimits": {
            "description": "Limits for the TileRow and TileCol values for each TileMatrix in the tileMatrixSet. If missing, there are no limits other that the ones imposed by the TileMatrixSet. If present the TileMatrices listed are limited and the rest not available at all",
            "items": {
              "$ref": "#/components/schemas/tileMatrixLimits"
            },
            "type": "array"
          },
          "tileMatrixSetURI": {
            "description": "Reference to a Tile Matrix Set on an offical source for Tile Matrix Sets such as the OGC NA definition server (http://www.opengis.net/def/tms/). Required if the tile matrix set is registered on an open official source.",
            "format": "uri",
            "type": "string"
          },
          "title": {
            "description": "A title for this tileset",
            "type": "string"
          },
          "updated": {
            "allOf": [
              {
                "description": "Last Tile Set change/revision"
              },
              {
                "$ref": "#/components/schemas/timeStamp"
              }
            ]
          },
          "version": {
            "description": "Version of the Tile Set. Changes if the data behind the tiles has been changed",
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "crs",
          "links"
        ],
        "title": "Tile Set Metadata",
        "type": "object"
      },
      "tileSet-item": {
        "description": "A minimal tileset element for use within a list of tilesets linking to full description of those tilesets.",
        "properties": {
          "crs": {
            "allOf": [
              {
                "description": "Coordinate Reference System (CRS)"
              },
              {
                "$ref": "#/components/schemas/crs"
              }
            ]
          },
          "dataType": {
            "allOf": [
              {
                "description": "Type of data represented in the tileset"
              },
              {
                "$ref": "#/components/schemas/dataType"
              }
            ]
          },
          "links": {
            "description": "Links to related resources. A 'self' link to the tileset as well as a 'http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme' link to a definition of the TileMatrixSet are required.",
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "tileMatrixSetURI": {
            "description": "Reference to a Tile Matrix Set on an offical source for Tile Matrix Sets such as the OGC NA definition server (http://www.opengis.net/def/tms/). Required if the tile matrix set is registered on an open official source.",
            "format": "uri",
            "type": "string"
          },
          "title": {
            "description": "A title for this tileset",
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "links",
          "crs"
        ],
        "title": "Tile Set Metadata item",
        "type": "object"
      },
      "timeStamp": {
        "description": "This property indicates the time and date when the response was generated.",
        "example": "2017-08-17T08:05:32Z",
        "format": "date-time",
        "type": "string"
      },
      "vectorTiles-collections": {
        "enum": [
          "NaturalEarth:cultural:ne_10m_admin_0_countries",
          "NaturalEarth:physical:bathymetry"
        ],
        "type": "string"
      }
    }
  },
  "info": {
    "contact": {
      "email": "standards-team@ogc.org",
      "name": "Open Geospatial Consortium (OGC)",
      "url": "https://www.ogc.org/contacts"
    },
    "description": "Common components used in the\n[\"OGC API - Features - Part 1: Core corrigendum standard\"](https://docs.opengeospatial.org/is/17-069r4/17-069r4.html).\n\nOGC API - Features - Part 1: Core corrigendum 1.0.1 is an OGC Standard.\nCopyright (c) 2022 Open Geospatial Consortium.\nTo obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .\n\nThis is an informative document. The building blocks in this document are also available on the\n[OGC](http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml) schema repository.",
    "license": {
      "name": "OGC License",
      "url": "http://www.opengeospatial.org/legal/"
    },
    "title": "Building Blocks specified in the OGC API - Features - Part 1: Core corrigendum standard",
    "version": "1.0.1",
    "x-logo": {
      "url": "https://www.ogc.org/pub/www/files/OGC_Logo_2D_Blue_x_0_0.png"
    }
  },
  "openapi": "3.0.2",
  "paths": {
    "/": {
      "get": {
        "description": "The landing page provides links to the API definition, the conformance\nstatements and to the feature collections in this dataset.",
        "operationId": "getLandingPage",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LandingPage",
            "content": {
              "application/json": {
                "example": {
                  "description": "Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.",
                  "links": [
                    {
                      "href": "http://data.example.org/",
                      "rel": "self",
                      "title": "this document",
                      "type": "application/json"
                    },
                    {
                      "href": "http://data.example.org/api",
                      "rel": "service-desc",
                      "title": "the API definition",
                      "type": "application/vnd.oai.openapi+json;version=3.0"
                    },
                    {
                      "href": "http://data.example.org/api.html",
                      "rel": "service-doc",
                      "title": "the API documentation",
                      "type": "text/html"
                    },
                    {
                      "href": "http://data.example.org/conformance",
                      "rel": "conformance",
                      "title": "OGC API conformance classes implemented by this server",
                      "type": "application/json"
                    },
                    {
                      "href": "http://data.example.org/collections",
                      "rel": "data",
                      "title": "Information about the feature collections",
                      "type": "application/json"
                    }
                  ],
                  "title": "Buildings in Bonn"
                },
                "schema": {
                  "$ref": "#/components/schemas/landingPage"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The landing page provides links to the API definition\n(link relations `service-desc` and `service-doc`),\nthe Conformance declaration (path `/conformance`,\nlink relation `conformance`), and the Feature\nCollections (path `/collections`, link relation\n`data`)."
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A server error occurred."
          }
        },
        "summary": "landing page",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/api": {
      "get": {
        "operationId": "getAPI",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/API"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve this API definition.",
        "tags": [
          "API"
        ]
      }
    },
    "/api/all-collections": {
      "get": {
        "operationId": "getAPICollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of collections available from this API implementation \u0026 deployment.",
        "tags": [
          "API"
        ]
      }
    },
    "/api/coverage-collections": {
      "get": {
        "operationId": "getAPICoverageCollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of coverages collections available from this API implementation \u0026 deployment.",
        "tags": [
          "API"
        ]
      }
    },
    "/api/styles": {
      "get": {
        "operationId": "getAPIStyles",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of dataset styles available from this API implementation \u0026 deployment.",
        "tags": [
          "API"
        ]
      }
    },
    "/api/tileMatrixSets": {
      "get": {
        "operationId": "getAPITileMatrixSets",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of shared TileMatrixSets available from this API implementation \u0026 deployment.",
        "tags": [
          "API"
        ]
      }
    },
    "/api/vectorTiles-collections": {
      "get": {
        "operationId": "getAPIVectorTileCollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of collections supporting vector tiles available from this API implementation \u0026 deployment.",
        "tags": [
          "API"
        ]
      }
    },
    "/collections": {
      "get": {
        "operationId": "getCollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "description": "Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):\n* Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)\nThe coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.\nFor WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).\nIf the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.\nIf a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.",
            "explode": false,
            "in": "query",
            "name": "bbox",
            "required": false,
            "schema": {
              "items": {
                "format": "double",
                "type": "number"
              },
              "oneOf": [
                {
                  "maxItems": 4,
                  "minItems": 4
                },
                {
                  "maxItems": 6,
                  "minItems": 6
                }
              ],
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "The optional limit parameter limits the number of collections that are presented in the response document.\nOnly items are counted that are on the first level of the collection in the response document. Nested objects contained within the explicitly requested items shall not be counted.\n* Minimum = 1 * Maximum = 10000 * Default = 10",
            "explode": false,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CollectionsList",
            "content": {
              "application/json": {
                "example": {
                  "collections": [
                    {
                      "description": "Buildings in the city of Bonn.",
                      "extent": {
                        "spatial": {
                          "bbox": [
                            [
                              7.01,
                              50.63,
                              7.22,
                              50.78
                            ]
                          ]
                        },
                        "temporal": {
                          "interval": [
                            [
                              "2010-02-15T12:34:56Z",
                              null
                            ]
                          ]
                        }
                      },
                      "id": "buildings",
                      "links": [
                        {
                          "href": "http://data.example.org/collections/buildings/items",
                          "rel": "items",
                          "title": "Buildings",
                          "type": "application/geo+json"
                        },
                        {
                          "href": "http://data.example.org/collections/buildings/items.html",
                          "rel": "items",
                          "title": "Buildings",
                          "type": "text/html"
                        },
                        {
                          "href": "https://creativecommons.org/publicdomain/zero/1.0/",
                          "rel": "license",
                          "title": "CC0-1.0",
                          "type": "text/html"
                        },
                        {
                          "href": "https://creativecommons.org/publicdomain/zero/1.0/rdf",
                          "rel": "license",
                          "title": "CC0-1.0",
                          "type": "application/rdf+xml"
                        }
                      ],
                      "title": "Buildings"
                    }
                  ],
                  "links": [
                    {
                      "href": "http://data.example.org/collections.json",
                      "rel": "self",
                      "title": "this document",
                      "type": "application/json"
                    },
                    {
                      "href": "http://data.example.org/collections.html",
                      "rel": "alternate",
                      "title": "this document as HTML",
                      "type": "text/html"
                    },
                    {
                      "href": "http://schemas.example.org/1.0/buildings.xsd",
                      "rel": "describedby",
                      "title": "GML application schema for Acme Corporation building data",
                      "type": "application/xml"
                    },
                    {
                      "href": "http://download.example.org/buildings.gpkg",
                      "length": 472546,
                      "rel": "enclosure",
                      "title": "Bulk download (GeoPackage)",
                      "type": "application/geopackage+sqlite3"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/collections"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The feature collections shared by this API.\n\nThe dataset is organized as one or more feature collections. This resource\nprovides information about and access to the collections.\n\nThe response contains the list of collections. For each collection, a link\nto the items in the collection (path `/collections/{collectionId}/items`,\nlink relation `items`) as well as key information about the collection.\nThis information includes:\n\n* A local identifier for the collection that is unique for the dataset;\n* A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* An optional title and description for the collection;\n* An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature')."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A server error occurred."
          }
        },
        "summary": "the feature collections in the dataset",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/collections/{collectionId}": {
      "get": {
        "operationId": "describeCollection",
        "parameters": [
          {
            "description": "local identifier of a collection",
            "explode": false,
            "in": "path",
            "name": "collectionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Collection",
            "content": {
              "application/json": {
                "example": {
                  "description": "Buildings in the city of Bonn.",
                  "extent": {
                    "spatial": {
                      "bbox": [
                        [
                          7.01,
                          50.63,
                          7.22,
                          50.78
                        ]
                      ]
                    },
                    "temporal": {
                      "interval": [
                        [
                          "2010-02-15T12:34:56Z",
                          null
                        ]
                      ]
                    }
                  },
                  "id": "buildings",
                  "links": [
                    {
                      "href": "http://data.example.org/collections/buildings/items",
                      "rel": "items",
                      "title": "Buildings",
                      "type": "application/geo+json"
                    },
                    {
                      "href": "http://data.example.org/collections/buildings/items.html",
                      "rel": "items",
                      "title": "Buildings",
                      "type": "text/html"
                    },
                    {
                      "href": "https://creativecommons.org/publicdomain/zero/1.0/",
                      "rel": "license",
                      "title": "CC0-1.0",
                      "type": "text/html"
                    },
                    {
                      "href": "https://creativecommons.org/publicdomain/zero/1.0/rdf",
                      "rel": "license",
                      "title": "CC0-1.0",
                      "type": "application/rdf+xml"
                    }
                  ],
                  "title": "Buildings"
                },
                "schema": {
                  "$ref": "#/components/schemas/collection"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Information about the feature collection with id `collectionId`.\n\nThe response contains a link to the items in the collection\n(path `/collections/{collectionId}/items`, link relation `items`)\nas well as key information about the collection. This information\nincludes:\n\n* A local identifier for the collection that is unique for the dataset;\n* A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);\n* An optional title and description for the collection;\n* An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n* An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature')."
          },
          "404": {
            "description": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A server error occurred."
          }
        },
        "summary": "describe the feature collection with id `collectionId`",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/collections/{collectionId}/coverage/tiles": {
      "get": {
        "operationId": ".collection.coverage.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of available coverage tilesets for the specified collection.",
        "tags": [
          "Coverage Tiles"
        ]
      }
    },
    "/collections/{collectionId}/coverage/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".collection.coverage.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/collections-coverage"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the coverage tileset metadata for the specified collection and tiling scheme (tile matrix set)",
        "tags": [
          "Coverage Tiles"
        ]
      }
    },
    "/collections/{collectionId}/coverage/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".collection.coverage.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collectionId-coverage"
          },
          {
            "$ref": "#/components/parameters/collections-coverage"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-coverageTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CoverageTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve coverage tiles",
        "tags": [
          "Coverage Tiles"
        ]
      }
    },
    "/collections/{collectionId}/items": {
      "get": {
        "description": "Fetch features of the feature collection with id `collectionId`.\n\nEvery feature in a dataset belongs to a collection. A dataset may\nconsist of multiple feature collections. A feature collection is often a\ncollection of features of a similar type, based on a common schema.\n\nUse content negotiation to request HTML or GeoJSON.",
        "operationId": "getFeatures",
        "parameters": [
          {
            "description": "local identifier of a collection",
            "explode": false,
            "in": "path",
            "name": "collectionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
            "explode": false,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
            "explode": false,
            "in": "query",
            "name": "bbox",
            "required": false,
            "schema": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
            "explode": false,
            "in": "query",
            "name": "datetime",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "example": {
                  "features": [
                    {
                      "geometry": {
                        "coordinates": [
                          "..."
                        ],
                        "type": "Polygon"
                      },
                      "id": "123",
                      "properties": {
                        "floors": "2",
                        "function": "residential",
                        "lastUpdate": "2015-08-01T12:34:56Z"
                      },
                      "type": "Feature"
                    },
                    {
                      "geometry": {
                        "coordinates": [
                          "..."
                        ],
                        "type": "Polygon"
                      },
                      "id": "132",
                      "properties": {
                        "floors": "10",
                        "function": "public use",
                        "lastUpdate": "2013-12-03T10:15:37Z"
                      },
                      "type": "Feature"
                    }
                  ],
                  "links": [
                    {
                      "href": "http://data.example.com/collections/buildings/items.json",
                      "rel": "self",
                      "title": "this document",
                      "type": "application/geo+json"
                    },
                    {
                      "href": "http://data.example.com/collections/buildings/items.html",
                      "rel": "alternate",
                      "title": "this document as HTML",
                      "type": "text/html"
                    },
                    {
                      "href": "http://data.example.com/collections/buildings/items.json\u0026offset=10\u0026limit=2",
                      "rel": "next",
                      "title": "next page",
                      "type": "application/geo+json"
                    }
                  ],
                  "numberMatched": 123,
                  "numberReturned": 2,
                  "timeStamp": "2018-04-03T14:52:23Z",
                  "type": "FeatureCollection"
                },
                "schema": {
                  "$ref": "#/components/schemas/featureCollectionGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, the API supports\npaged access with links to the next page, if more features are selected\nthat the page size.\n\nThe `bbox` and `datetime` parameter can be used to select only a\nsubset of the features in the collection (the features that are in the\nbounding box or time interval). The `bbox` parameter matches all features\nin the collection that are not associated with a location, too. The\n`datetime` parameter matches all features in the collection that are\nnot associated with a time stamp or interval, too.\n\nThe `limit` parameter may be used to control the subset of the\nselected features that should be returned in the response, the page size.\nEach page may include information about the number of selected and\nreturned features (`numberMatched` and `numberReturned`) as well as\nlinks to support paging (link relation `next`)."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A query parameter has an invalid value."
          },
          "404": {
            "description": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A server error occurred."
          }
        },
        "summary": "fetch features",
        "tags": [
          "Data"
        ]
      }
    },
    "/collections/{collectionId}/items/{featureId}": {
      "get": {
        "description": "Fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`.\n\nUse content negotiation to request HTML or GeoJSON.",
        "operationId": "getFeature",
        "parameters": [
          {
            "description": "local identifier of a collection",
            "explode": false,
            "in": "path",
            "name": "collectionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "local identifier of a feature",
            "explode": false,
            "in": "path",
            "name": "featureId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "example": {
                  "geometry": {
                    "coordinates": [
                      "..."
                    ],
                    "type": "Polygon"
                  },
                  "id": "123",
                  "links": [
                    {
                      "href": "http://data.example.com/id/building/123",
                      "rel": "canonical",
                      "title": "canonical URI of the building"
                    },
                    {
                      "href": "http://data.example.com/collections/buildings/items/123.json",
                      "rel": "self",
                      "title": "this document",
                      "type": "application/geo+json"
                    },
                    {
                      "href": "http://data.example.com/collections/buildings/items/123.html",
                      "rel": "alternate",
                      "title": "this document as HTML",
                      "type": "text/html"
                    },
                    {
                      "href": "http://data.example.com/collections/buildings",
                      "rel": "collection",
                      "title": "the collection document",
                      "type": "application/geo+json"
                    }
                  ],
                  "properties": {
                    "floors": "2",
                    "function": "residential",
                    "lastUpdate": "2015-08-01T12:34:56Z"
                  },
                  "type": "Feature"
                },
                "schema": {
                  "$ref": "#/components/schemas/featureGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`"
          },
          "404": {
            "description": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A server error occurred."
          }
        },
        "summary": "fetch a single feature",
        "tags": [
          "Data"
        ]
      }
    },
    "/collections/{collectionId}/map/tiles": {
      "get": {
        "operationId": ".collection.map.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-all"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a list of all map tilesets for specified collection.",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/collections/{collectionId}/map/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".collection.map.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-all"
          },
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a map tile set metadata for the specified collection and tiling scheme (tile matrix set)",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".collection.map.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collectionId-all"
          },
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/bgcolor"
          },
          {
            "$ref": "#/components/parameters/transparent"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-mapTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MapTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a map tile from the specified collection",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/collections/{collectionId}/styles/{styleId}/map/tiles": {
      "get": {
        "operationId": ".collection.style.map.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-all"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          },
          {
            "$ref": "#/components/parameters/styleId-collection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a list of styled map tilesets for the specified collection",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/collections/{collectionId}/styles/{styleId}/map/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".collection.style.map.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-all"
          },
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/styleId-collection"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the map tileset metadata for the specified collection, style and tiling scheme (tile matrix set).",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/collections/{collectionId}/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".collection.style.map.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collectionId-all"
          },
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/bgcolor"
          },
          {
            "$ref": "#/components/parameters/transparent"
          },
          {
            "$ref": "#/components/parameters/styleId-collection"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-mapTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MapTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a map tile for a specified collection and style",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/collections/{collectionId}/styles/{styleId}/tiles": {
      "get": {
        "operationId": ".collection.style.vector.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          },
          {
            "$ref": "#/components/parameters/styleId-collection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a list of vector tilesets for the specified collection intended for use with a specified style",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/collections/{collectionId}/styles/{styleId}/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".collection.style.vector.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/collections-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/styleId-collection"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the vector tileset metadata for the specified collection, style and tiling scheme (tile matrix set).",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/collections/{collectionId}/styles/{styleId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".collection.style.vector.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collectionId-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/collections-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/bgcolor"
          },
          {
            "$ref": "#/components/parameters/transparent"
          },
          {
            "$ref": "#/components/parameters/styleId-collection"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-vectorTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VectorTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve vector tiles for a specified collection, intended for use with a specified style",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/collections/{collectionId}/tiles": {
      "get": {
        "operationId": ".collection.vector.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a list of available vector tilesets for the specified collection.",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/collections/{collectionId}/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".collection.vector.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionId-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/collections-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the vector tileset metadata for the specified collection and tiling scheme (tile matrix set)",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/collections/{collectionId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".collection.vector.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collectionId-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/collections-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-vectorTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VectorTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a vector tile from a collection.",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/conformance": {
      "get": {
        "description": "A list of all conformance classes specified in a standard that the\nserver conforms to.",
        "operationId": "getConformanceDeclaration",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Conformance",
            "content": {
              "application/json": {
                "example": {
                  "conformsTo": [
                    "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core",
                    "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30",
                    "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html",
                    "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/confClasses"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The URIs of all conformance classes supported by the server.\n\nTo support \"generic\" clients that want to access multiple\nOGC API Features implementations - and not \"just\" a specific\nAPI / server, the server declares the conformance\nclasses it implements and conforms to."
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A server error occurred."
          }
        },
        "summary": "information about specifications that this API conforms to",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/map/tiles": {
      "get": {
        "operationId": ".dataset.map.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of all default map tilesets for the whole dataset",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/map/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".dataset.map.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a default map tileset of the whole dataset for the specified tiling scheme (tile matrix set)",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".dataset.map.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/bgcolor"
          },
          {
            "$ref": "#/components/parameters/transparent"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-mapTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MapTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a default map tile of the whole dataset",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/styles/{styleId}/map/tiles": {
      "get": {
        "operationId": ".dataset.style.map.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/styleId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of styled map tilesets for the whole dataset",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/styles/{styleId}/map/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".dataset.style.map.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/styleId"
          },
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a styled map tileset of the whole dataset for the specified tiling scheme (tile matrix set)",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".dataset.style.map.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/bgcolor"
          },
          {
            "$ref": "#/components/parameters/transparent"
          },
          {
            "$ref": "#/components/parameters/styleId"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-mapTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MapTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a styled map tiles",
        "tags": [
          "Map Tiles"
        ]
      }
    },
    "/styles/{styleId}/tiles": {
      "get": {
        "operationId": ".dataset.style.vector.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/styleId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of vector tilesets intended for use with a specified style for the whole dataset",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/styles/{styleId}/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".dataset.style.vector.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/styleId"
          },
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a vector tileset intended for use with a specified style of the whole dataset for the specified tiling scheme (tile matrix set)",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/styles/{styleId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".dataset.style.vector.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collections-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/styleId"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-vectorTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VectorTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve vector tiles intended for use with a specified style",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/tileMatrixSets": {
      "get": {
        "operationId": "getTileMatrixSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileMatrixSetsList"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the list of available tiling schemes (tile matrix sets)",
        "tags": [
          "Tiling Schemes"
        ]
      }
    },
    "/tileMatrixSets/{tileMatrixSetId}": {
      "get": {
        "operationId": "getTileMatrixSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileMatrixSet"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              }
            },
            "description": "The requested tile matrix set id was not found"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the definition of the specified tiling scheme (tile matrix set)",
        "tags": [
          "Tiling Schemes"
        ]
      }
    },
    "/tiles": {
      "get": {
        "operationId": ".dataset.vector.getTileSetsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSetsList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a list of available vector tilesets for the dataset",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/tiles/{tileMatrixSetId}": {
      "get": {
        "operationId": ".dataset.vector.getTileSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/collections"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TileSet"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve the vector tileset metadata for the whole dataset and the specified tiling scheme (tile matrix set)",
        "tags": [
          "Vector Tiles"
        ]
      }
    },
    "/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
      "get": {
        "operationId": ".dataset.vector.getTile",
        "parameters": [
          {
            "$ref": "#/components/parameters/tileMatrix"
          },
          {
            "$ref": "#/components/parameters/tileRow"
          },
          {
            "$ref": "#/components/parameters/tileCol"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/collections-vectorTiles"
          },
          {
            "$ref": "#/components/parameters/subset"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/subset-crs"
          },
          {
            "$ref": "#/components/parameters/tileMatrixSetId"
          },
          {
            "$ref": "#/components/parameters/f-vectorTile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VectorTile"
          },
          "204": {
            "$ref": "#/components/responses/EmptyTile"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "summary": "Retrieve a vector tile including one or more collections from the dataset.",
        "tags": [
          "Vector Tiles"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "Example OGC API server",
      "url": "https://www.example.org/ogcapi"
    }
  ],
  "tags": [
    {
      "description": "essential characteristics of this API",
      "name": "Capabilities"
    },
    {
      "description": "access to data (features)",
      "name": "Data"
    }
  ]
}