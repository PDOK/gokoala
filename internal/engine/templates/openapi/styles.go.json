{{- /*gotype: github.com/PDOK/gokoala/internal/engine.TemplateData*/ -}}
{
  "openapi": "3.0.2",
  "info": {
    "version": "0.0.1",
    "title": "Building Blocks specified in OGC API - Styles - Part 1: Core",
    "license": {
      "name": "OGC software license 1.0",
      "url": "http://www.ogc.org/ogc/software/1.0"
    },
    "description": "This document is not an OGC Standard. This document is distributed for review and comment. This document is subject to change without notice and may not be referred to as an OGC Standard.\nRecipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.\n# Overview\nThis is a draft implementation of [OGC API - Styles](https://github.com/opengeospatial/ogcapi-styles) and supports the discovery, fetching and mutation of styles.\nThe API has been designed to support the following components as consumers:\n* **Visual style editors** create, update and delete styles for datasets that are shared by other Web APIs implementing OGC API Features, OGC API Coverages or OGC API Tiles;\n* **Web APIs implementing OGC API Maps** fetch styles and render spatial data (features or coverages) on the server;\n* **Map clients** fetch styles and render spatial data (features or coverages) on the client.\nFeature data is either accessed directly or organised in spatial partitions (\"vector tiles\").\nThis API uses the following style-related terms and concepts.\n* **Styles** organize a sequence of rules of symbolizing instructions to be applied by a rendering engine on one or more features and/or coverages.\n* **Style encodings** are specifications to express a style as one or more files. In Testbed-15 Mapbox Styles, OGC SLD versions 1.0 and 1.1 are used.\n* **Stylesheets** are representations of a style in a style encoding.\n* **Style metadata** is essential information about a style in order to support users to discover and select styles for rendering their data and for visual style editors to create user interfaces for editing a style.\nStylesheets often reference external resources, especially symbols and fonts to be used in the rendering process.\nSymbols are either managed as a single file for each symbol or they are organised in a sprite - all symbols combined in a single bitmap image to reduce memory and the number of http requests. Single symbols and sprites are supported by this API and they may be stored on this server, for example, to avoid issues with cross-origin requests. Of course, existing external symbol libraries may also be referenced from stylesheets.\nThis API does not support font resources and if you want to reference fonts / glyphs from a stylesheet, please reference an existing font library.\nCurrently no media types have been registered for Mapbox Styles or OGC SLD. Temporary media types in the vnd-branch are used for now.\nFor more background information see the [OGC Testbed 15 Portrayal Summary Engineering Report](http://docs.opengeospatial.org/per/19-018.html) and the Engineering Reports linked from that report.\nThe API is consistent with the emerging OGC API family of standards and is currently the starting point for a future \"OGC API - Styles\" standard.\nAPI components that are used by more than one of the draft API specifications are not defined in this document, but are defined in two domains on Swaggerhub ([OGC API - Features - Part 1: Core building blocks](https://app.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0) and [draft building blocks](https://app.swaggerhub.com/domains/cportele/ogcapi-draft-extensions/1.0.0)). These are included by reference.\nThis document is also available in [GitHub](https://github.com/cportele/t15-opf/blob/master/style-api.yaml).\n# Conformance classes\nThe Style API specifies the following conformance classes.\n* **'core'** supports the basic GET operations on `/`, `/conformance`, `/styles`, `/styles/{styleId}`, and `/styles/{styleId}/metadata`. Support for media type `application/json` as a response to the GET operations on `/`, `/conformance`, `/styles`, and `/styles/{styleId}/metadata` is required.\n* **'html'** supports `text/html` as a response to the GET operations on `/`, `/conformance`, `/styles`, and `/styles/{styleId}/metadata`\n* **'manage-styles'** adds POST/PUT/DELETE/PATCH methods on `/styles`, `/styles/{styleId}`, and `/styles/{styleId}/metadata`\n* **'style-validation'** adds the `validate` parameter on POST requests to `/styles`\n* **'resources'** adds the basic GET operations on `/resources`, and `/resources/{resourceId}`\n* **'manage-resources'** adds POST/PUT/DELETE/PATCH methods on `/resources`, and `/resources/{resourceId}`\n* **'mapbox-styles'** supports Mapbox Styles as a style encoding on `/styles` and `/styles/{styleId}`\n* **'sld-10'** supports SLD 1.0 as a style encoding on `/styles` and `/styles/{styleId}`\n* **'sld-11'** supports SLD 1.1 as a style encoding on `/styles` and `/styles/{styleId}`\n# Examples how clients are expected to interact with the API\nA dataset with topographic data according to the TDS specification is avaiable via an API that implements the OGC API Features and Tiles specification ([landing page of the dataset](https://services.interactive-instruments.de/t15/daraa)). The dataset covers the region of Daraa, Syria. The URI of the landing page is used as `{data}` in the descriptions below.\nIn addition, the API also contains a style repository ([landing page of the repository](`https://services.interactive-instruments.de/t15/daraa`)). The URI of the landing page is used as `{styles}` in the descriptions below.\nIn the sample implementation `{data}` and `{styles}` are the same API, but that does not have to be the case.\nRoads are included in the data in the collection `TransportationGroundCrv` as [features with a property `F_CODE` with a value of `AP030`](https://services.interactive-instruments.de/t15/daraa/collections/TransportationGroundCrv/items?F_CODE=AP030).\n## A visual style editor creating a new style\nA user wants to create a new style for TDS roads using her visual style editor. She knows the Daraa dataset and the data access API.\nAfter creating a new style, selecting the native stylesheet language for the style and identifying the `TransportationGroundCrv` collection in the Daraa dataset as a sample data source, the visual style editor executes a request to `{data}/conformance` of the data access API to determine the API capabilities. Note that alternatively also the API definition may be inspected, but for a client that supports the OGC API standards in general, using the conformance declaration is simpler and, therefore, used in this example.\nIf the editor supports both styling of GeoJSON features or Mapbox Vector Tile data, the editor requires support for at least one of the two following sets of conformance classes:\n* `http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core` and `http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson`\nor\n* `http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core`.\nThe first one provides access to GeoJSON features via `{data}/collections/TransportationGroundCrv/items`, the second one provides access to MVT tiles via `{data}/collections/TransportationGroundCrv/tiles`.\nIn addition, the visual style editor will look for the following conformance classes:\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/queryables`: If this conformance class is supported, the visual style editor can specify styling rules that make use of feature properties. Otherwise all styling rules will apply to all features in each collection.\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/style-links`: If this conformance class is supported, the visual style editor will be able to create a link from the collection to the newly created style.\nThe editor will also request information about the features in the collection via a request to `{data}/collections/TransportationGroundCrv`.\nIf `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/queryables` is supported the queryables are retrieved via a request to `{data}/collections/TransportationGroundCrv/queryables`.\nBased on this information, the visual style editor is able to configure its user interface and guide the user through the creation of the style for road features and visualize the draft style using the Daraa data. Once she has finished the style, the style will be published on a Style repository that supports the Style API.\nIf the user request the use of a Style repository that the editor interacts with for the first time, the editor will again inspect the capabilities of the repository by fetching the conformance declaration at `{styles}/conformance`.\nAt least the following conformance classes must be supported in order for sharing the new style via the repository.\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/core`\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/json`\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/manage-styles`\nIn addition, if the style includes symbols or sprites, the repository also has to support the following conformance classes:\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/resources`\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/manage-resources`\nFinally, the repository has to support the native stylesheet language that the user has selected for the style definition, i.e. one of:\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/mapbox-styles`\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/sld-10`\n* `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/sld-11`\nThe visual style editor will ask the user for her credentials (username and password) in the style repository and use the credentials in any of the following POST/PUT/PATCH requests.\nIf `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/style-validation` is supported, the visual style editor can also offer validation of the draft style any time during the drafting process using POST requests with the draft stylesheet to `{styles}/styles?validate=only`.\nTo create the new style either a POST request with the stylesheet to `{styles}/styles` or a PUT request to `{styles}/styles/{stylename}` (where `{stylename}` is the name of the style specified by the user) is sent. `?validate=true` may be added to the request URI to trigger validation in this step, too, if the style validation conformance class is supported. If PUT is used, the visual style editor should check that no existing style `{stylename}` exists.\nAfter a succesful creation of the style (in case of a POST request, the URI of the new style `{styles}/styles/{stylename}` is returned in a HTTP header `Location`), the visual style editor will update the style metadata using a PUT or PATCH request to `{styles}/styles/{stylename}/metadata`.\nIf the data access API supports the conformance class `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/style-links`, the visual style editor will add a link to the new style using a PATCH request to `{data}/collections/TransportationGroundCrv`.\n## A visual style editor updating an existing style\nThe process is quite similar to the previous example with the following changes:\n* The user will start from an existing style, not with a new style. I.e., the user will open/load the style from the style repository and the editor will fetch it from `{styles}/styles/{stylename}` (using the stylesheet language of choice) and its metadata from `{styles}/styles/{stylename}/metadata`.\n* If the style metadata includes links to sample data (e.g., `{data}/collections/TransportationGroundCrv`), the editor may use that data for sample visualizations and perhaps to determine changes to queryables. The user may also select other data sources for these purposes.\n* Since an existing style is updated, the style definition will always be updated with a PUT request to `{styles}/styles/{stylename}` (no POST request to `{styles}/styles`, which would create a new style).\n## A map client\nA map client that wants to visualize data for features or vector tiles for the collection `{data}/collections/TransportationGroundCrv` will look for a `styles` member in the response. It will probably select one of the styles from the list taking the media types of the supported stylesheets into account and provide a capability so that users can change the style. The stylesheet returned based on the `href` member of the link will be used to render the data.\n"
  },
  "paths": {
    "/styles": {
      "get": {
        "tags": [
          "Styles"
        ],
        "summary": "information about the available styles",
        "operationId": "getStyleSet",
        "description": "This operation fetches the set of styles available. For\neach style the id, a title, links to the stylesheet of\nthe style in each supported encoding, and the link to the\nmetadata is provided.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-json"
          }
        ],
        "responses": {
          "200": {
            "description": "The set of available styles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/style-set"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {{block "problems" . }}{{end}}
        }
      }
    },
    "/styles/{styleId}": {
      "get": {
        "tags": [
          "Styles"
        ],
        "summary": "fetch a style by id",
        "description": "Fetches the style with identifier `styleId`. The set of\navailable styles can be retrieved at `/styles`.\n\nNot all styles are available in all style encodings.",
        "operationId": "getStyle",
        "parameters": [
          {
            "$ref": "#/components/parameters/styleId"
          },
          {
            "$ref": "#/components/parameters/f-style"
          }
        ],
        "responses": {
          "200": {
            "description": "The style"
          },
          {{block "problems" . }}{{end}}
        }
      }
    },
    "/styles/{styleId}/metadata": {
      "get": {
        "tags": [
          "Styles"
        ],
        "summary": "fetch the metadata about a style",
        "description": "Style metadata is essential information about a style\nin order to support users to discover and select styles\nfor rendering their data and for visual style editors\nto create user interfaces for editing a style.\n\nThis operations returns the metadata for the requested\nstyle as a single document.\n\nThe stylesheet of the style will typically include some\nthe metadata, too.",
        "operationId": "getStyleMetadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/styleId"
          },
          {
            "$ref": "#/components/parameters/f-json"
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata for the style.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/style-metadata"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {{block "problems" . }}{{end}}
        }
      }
    },
    "/styles/{styleId}/legend": {
      "get": {
        "tags": [
          "Styles"
        ],
        "summary": "fetch the legend of the style",
        "description": "Fetches the legend for a style as a PNG image (when available). The legend describes the symbols, colors and texts used in the style.",
        "operationId": "getStyleLegend",
        "parameters": [
          {
            "$ref": "#/components/parameters/styleId"
          }
        ],
        "responses": {
          "200": {
            "description": "The legend for the style.",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          {{block "problems" . }}{{end}}
        }
      }
    }
  },
  "components": {
    "parameters": {
      "f-html-json": {
        "name": "f",
        "in": "query",
        "description": "(informative) \\\nThe content type of the response. If no value is provided,\nthe standard http rules apply, i.e., the accept header\nwill be used to determine the format.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "html"
          ]
        },
        "example": "json"
      },
      "f-json": {
        "name": "f",
        "in": "query",
        "description": "(informative) \\\nThe content type of the response. If no value is provided,\nthe standard http rules apply, i.e., the accept header\nwill be used to determine the format.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string",
          "enum": [
            "json"
          ]
        },
        "example": "json"
      },
      "f-style": {
        "name": "f",
        "in": "query",
        "description": "(informative) \\\nThe content type of the response. If no value is provided,\nthe standard http rules apply, i.e., the accept header\nwill be used to determine the format.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string",
          "enum": [
            "mapbox",
            "sld10",
            "sld11"
          ]
        },
        "example": "mapbox"
      },
      "validate": {
        "name": "validate",
        "in": "query",
        "description": "(part of conformance class 'style-validation') \\\n'yes' creates a new style after successful validation\nand returns 400, if validation fails,\n'no' creates the style without validation and\n'only' just validates the style without creating a\nnew style and returns 400, if validation fails,\notherwise 204.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string",
          "enum": [
            "yes",
            "no",
            "only"
          ]
        },
        "example": "only"
      },
      "styleId": {
        "name": "styleId",
        "in": "path",
        "description": "Local identifier of a style. \\\nA list of all available styles can be found\nunder the /styles path.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "resourceId": {
        "name": "resourceId",
        "in": "path",
        "description": "Local identifier of a symbol resource. \\\nA list of all available resource can be found\nunder the /resources path.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "mb-style": {
        "required": [
          "layers",
          "sources",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "example": 8
          },
          "name": {
            "type": "string",
            "example": "night"
          },
          "sources": {
            "type": "object",
            "properties": {
              "daraa": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "vector"
                  },
                  "url": {
                    "type": "string",
                    "example": "https://services.interactive-instruments.de/vtp/daraa/tiles/default/{z}/{y}/{x}?f=mvt"
                  }
                }
              }
            }
          },
          "sprite": {
            "type": "string",
            "example": "http://vtp2018.s3-eu-west-1.amazonaws.com/static/mapstorestyle/sprites/sprites"
          },
          "glyphs": {
            "type": "string",
            "example": "http://fonts.openmaptiles.org/{fontstack}/{range}.pbf"
          },
          "layers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/layers-array"
            }
          }
        }
      },
      "layers-array": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "example": "fill",
            "enum": [
              "fill",
              "line",
              "symbol",
              "circle",
              "heatmap",
              "fill-extrusion",
              "raster",
              "hillshade",
              "background"
            ]
          },
          "source": {
            "type": "string",
            "example": "daraa"
          },
          "source-layer": {
            "type": "string",
            "example": "vegetationsrf"
          },
          "layout": {
            "type": "object"
          },
          "paint": {
            "type": "object",
            "properties": {
              "fill-color": {
                "type": "string",
                "example": "#11083b"
              }
            }
          }
        }
      },
      "mb-sprite-index": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/mb-sprite-index-symbol"
        }
      },
      "mb-sprite-index-symbol": {
        "type": "object",
        "required": [
          "width",
          "height",
          "x",
          "y",
          "pixelRatio"
        ],
        "properties": {
          "width": {
            "type": "integer",
            "example": 32
          },
          "height": {
            "type": "integer",
            "example": 32
          },
          "x": {
            "type": "integer",
            "example": 0
          },
          "y": {
            "type": "integer",
            "example": 0
          },
          "pixelRatio": {
            "type": "number",
            "example": 1
          }
        }
      },
      "sld-10": {
        "type": "string"
      },
      "sld-11": {
        "type": "string"
      },
      "svg": {
        "type": "string"
      },
      "bitmap": {
        "type": "string",
        "format": "binary",
        "example": "M-^IPNG^M^Z^@^@^@^MIHDR^@^@^@^C^@^@^@^C^H^B^@^@^@?J\"?^@^@^@  pHYs^@^@^K^R^@^@^K^R^A??~?^@^@^@^PIDATxM-^\\cM-^X??^OA^LXX^@?^O1M-^K??A^@^@^@^@IEND?B`M-^B"
      },
      "resource-set": {
        "required": [
          "resources"
        ],
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resource-set-entry"
            },
            "example": [
              {
                "id": "sprite.json",
                "link": {
                  "href": "sprite.json",
                  "type": "application/json",
                  "rel": "???"
                }
              },
              {
                "id": "sprite.png",
                "link": {
                  "href": "sprite.png",
                  "type": "image/png",
                  "rel": "???"
                }
              },
              {
                "id": "sprite.@2x.png",
                "link": {
                  "href": "sprite.@2x.png",
                  "type": "image/png",
                  "rel": "???"
                }
              },
              {
                "id": "mosque.svg",
                "link": {
                  "href": "mosque.svg",
                  "type": "image/svg+xml",
                  "rel": "???"
                }
              }
            ]
          }
        }
      },
      "resource-set-entry": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "link": {
        "type": "object",
        "required": [
          "href",
          "rel"
        ],
        "properties": {
          "href": {
            "type": "string",
            "description": "Supplies the URI to a remote resource (or resource fragment).",
            "example": "http://data.example.com/buildings/123"
          },
          "rel": {
            "type": "string",
            "description": "The type or semantics of the relation.",
            "example": "alternate"
          },
          "type": {
            "type": "string",
            "description": "A hint indicating what the media type of the result of dereferencing the link should be.",
            "example": "application/geo+json"
          },
          "templated": {
            "type": "boolean",
            "description": "This flag set to true if the link is a URL template."
          },
          "varBase": {
            "description": "A base path to retrieve semantic information about the variables used in URL template.",
            "type": "string",
            "example": "/ogcapi/vars/"
          },
          "hreflang": {
            "type": "string",
            "description": "A hint indicating what the language of the result of dereferencing the link should be.",
            "example": "en"
          },
          "title": {
            "type": "string",
            "description": "Used to label the destination of a link such that it can be used as a human-readable identifier.",
            "example": "Trierer Strasse 70, 53115 Bonn"
          },
          "length": {
            "type": "integer"
          }
        }
      },
      "style-metadata": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "night"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "example": "Topographic night style"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "This topographic basemap style is designed to be\nused in situations with low ambient light.\n\nThe style supports datasets based on the TDS 6.1\nspecification."
          },
          "keywords": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": [
              "basemap",
              "TDS",
              "TDS 6.1",
              "OGC API"
            ]
          },
          "pointOfContact": {
            "type": "string",
            "nullable": true,
            "example": "John Doe"
          },
          "accessConstraints": {
            "type": "string",
            "nullable": true,
            "example": "unclassified",
            "enum": [
              "unclassified",
              "confidential",
              "restricted",
              "secret",
              "topSecret"
            ]
          },
          "dates": {
            "$ref": "#/components/schemas/dates"
          },
          "scope": {
            "type": "string",
            "nullable": true,
            "example": "style",
            "enum": [
              "style"
            ]
          },
          "version": {
            "type": "string",
            "nullable": true,
            "example": "1.0.0"
          },
          "stylesheets": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/stylesheet"
            },
            "example": [
              {
                "title": "Mapbox Style",
                "version": "8",
                "specification": "https://docs.mapbox.com/mapbox-gl-js/style-spec/",
                "native": true,
                "tilingScheme": "GoogleMapsCompatible",
                "link": {
                  "href": "https://example.org/catalog/1.0/styles/night?f=mapbox",
                  "rel": "stylesheet",
                  "type": "application/vnd.mapbox.style+json"
                }
              },
              {
                "title": "OGC SLD",
                "version": "1.0",
                "native": false,
                "link": {
                  "href": "https://example.org/catalog/1.0/styles/night?f=sld10",
                  "rel": "stylesheet",
                  "type": "application/vnd.ogc.sld+xml;version=1.0"
                }
              }
            ]
          },
          "layers": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/style-layer"
            },
            "example": [
              {
                "id": "vegetationsrf",
                "type": "polygon",
                "sampleData": {
                  "href": "https://services.interactive-instruments.de/vtp/daraa/collections/vegetationsrf/items?f=json&limit=100",
                  "rel": "data",
                  "type": "application/geo+json"
                }
              },
              {
                "id": "hydrographycrv",
                "type": "line",
                "sampleData": {
                  "href": "https://services.interactive-instruments.de/vtp/daraa/collections/hydrographycrv/items?f=json&limit=100",
                  "rel": "data",
                  "type": "application/geo+json"
                },
                "attributes": [
                  {
                    "id": "f_code",
                    "type": "string"
                  }
                ]
              }
            ]
          },
          "links": {
            "type": "array",
            "description": "The links may reference related resources. It is recommended to include\na link to a thumbnail with link relation `preview` (specified by RFC 6903)\nand the appropriate media type in the `type` parameter.\nThe thumbnail may be an image that is published as a resource in the API,\nit may reference an appropriate raster tile, a map request, etc.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "example": [
              {
                "href": "https://example.org/catalog/1.0/resources/night-thumbnail.png",
                "rel": "preview",
                "type": "image/png",
                "title": "thumbnail of the night style applied to OSM data from Daraa, Syria"
              }
            ]
          }
        }
      },
      "dates": {
        "type": "object",
        "nullable": true,
        "properties": {
          "creation": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "publication": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "revision": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validTill": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "receivedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "example": {
          "creation": "2019-01-01T10:05:00Z",
          "publication": "2019-01-01T11:05:00Z",
          "revision": "2019-02-01T11:05:00Z",
          "validTill": "2019-02-01T11:05:00Z",
          "receivedOn": "2019-02-01T11:05:00Z"
        }
      },
      "stylesheet": {
        "type": "object",
        "nullable": true,
        "required": [
          "link"
        ],
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "specification": {
            "type": "string",
            "format": "url",
            "nullable": true
          },
          "native": {
            "type": "boolean",
            "nullable": true
          },
          "tilingScheme": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "style-layer": {
        "type": "object",
        "nullable": true,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "vegetationsrf"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true,
            "example": "polygon",
            "enum": [
              "point",
              "line",
              "polygon",
              "geometry",
              "raster"
            ]
          },
          "attributes": {
            "$ref": "#/components/schemas/queryables"
          },
          "sampleData": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "queryables": {
        "type": "object",
        "required": [
          "queryables"
        ],
        "properties": {
          "queryables": {
            "type": "array",
            "nullable": true,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/queryable-string"
                },
                {
                  "$ref": "#/components/schemas/queryable-enum"
                },
                {
                  "$ref": "#/components/schemas/queryable-number"
                },
                {
                  "$ref": "#/components/schemas/queryable-boolean"
                },
                {
                  "$ref": "#/components/schemas/queryable-date"
                },
                {
                  "$ref": "#/components/schemas/queryable-dateTime"
                }
              ]
            }
          }
        }
      },
      "queryable": {
        "type": "object",
        "nullable": true,
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "description": "the property name for use in expressions"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "the title of the property for presentation to a human user"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "a description of the property"
          },
          "required": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "indicator whether the property is always present in features"
          },
          "mediaTypes": {
            "type": "array",
            "nullable": true,
            "description": "In cases where a property is available only in a subset of the\nsupported feature encodings, the list of the media types of the\nencodings can be specified.\n\nThis capabilitiy is also needed for cases where the names of\nproperties may differ between feature encodings. For example, \nidentifiers in an XML/GML encoding may include a namespace, \nin GeoJSON or MVT this is not the case. \n\nThere are other reasons, too. For example, the property identifier\nin a Shapefile may be different because of length restrictions.",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "nullable": true,
            "description": "the data type of the property",
            "enum": [
              "string",
              "uri",
              "enum",
              "number",
              "integer",
              "date",
              "dateTime",
              "boolean"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "string": "queryable-string",
            "enum": "queryable-enum",
            "uri": "queryable-string",
            "number": "queryable-number",
            "integer": "queryable-number",
            "date": "queryable-date",
            "dateTime": "queryable-dateTie",
            "boolean": "queryable-boolean"
          }
        }
      },
      "queryable-string": {
        "allOf": [
          {
            "$ref": "#/components/schemas/queryable"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "pattern": {
                "type": "string",
                "nullable": true,
                "description": "a regular expression to validate the values of the property"
              }
            }
          }
        ],
        "example": {
          "id": "name",
          "description": "the name of the vegetation area",
          "required": true,
          "type": "string",
          "example": "[A-Z0-9]{5}"
        }
      },
      "queryable-enum": {
        "allOf": [
          {
            "$ref": "#/components/schemas/queryable"
          },
          {
            "type": "object",
            "nullable": true,
            "required": [
              "values"
            ],
            "properties": {
              "values": {
                "type": "array",
                "nullable": true,
                "description": "the list of values of the property",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "example": {
          "id": "type",
          "description": "the dominant charcteristic of vegetation area",
          "type": "enum",
          "values": [
            "grassland",
            "forest",
            "farmland"
          ]
        }
      },
      "queryable-number": {
        "allOf": [
          {
            "$ref": "#/components/schemas/queryable"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "range": {
                "type": "array",
                "nullable": true,
                "minItems": 2,
                "maxItems": 2,
                "items": {
                  "type": "number",
                  "nullable": true
                },
                "description": "a range of valid values; open range can be expressed using `null`"
              }
            }
          }
        ],
        "example": {
          "id": "count",
          "description": "the number of cattle",
          "type": "integer",
          "range": [
            0,
            null
          ]
        }
      },
      "queryable-boolean": {
        "allOf": [
          {
            "$ref": "#/components/schemas/queryable"
          }
        ],
        "example": {
          "id": "fenced",
          "description": "indicator whether the area is walled or fenced",
          "type": "boolean"
        }
      },
      "queryable-date": {
        "allOf": [
          {
            "$ref": "#/components/schemas/queryable"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "range": {
                "type": "array",
                "nullable": true,
                "minItems": 2,
                "maxItems": 2,
                "items": {
                  "type": "string",
                  "format": "date",
                  "nullable": true
                },
                "description": "a range of valid values; open range can be expressed using `null`"
              }
            }
          }
        ],
        "example": {
          "id": "inspectionDate",
          "description": "the date of the last inspection",
          "type": "date",
          "range": [
            "2010-01-01",
            null
          ]
        }
      },
      "queryable-dateTime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/queryable"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "range": {
                "type": "array",
                "nullable": true,
                "minItems": 2,
                "maxItems": 2,
                "items": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "description": "a range of valid values; open range can be expressed using `null`"
              }
            }
          }
        ],
        "example": {
          "id": "lastUpdate",
          "description": "the date of the last update of the feature",
          "type": "dateTime",
          "range": [
            "2018-01-01T00:00:00Z",
            null
          ]
        }
      },
      "style-set": {
        "type": "object",
        "required": [
          "styles"
        ],
        "properties": {
          "styles": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/style-set-entry"
            },
            "example": [
              {
                "id": "night",
                "title": "Topographic night style",
                "links": [
                  {
                    "href": "https://example.com/api/1.0/styles/night?f=mapbox",
                    "type": "application/vnd.mapbox.style+json",
                    "rel": "stylesheet"
                  },
                  {
                    "href": "https://example.com/api/1.0/styles/night?f=sld10",
                    "type": "application/vnd.ogc.sld+xml;version=1.0",
                    "rel": "stylesheet"
                  },
                  {
                    "href": "https://example.com/api/1.0/styles/night/metadata?f=json",
                    "type": "application/json",
                    "rel": "describedBy"
                  }
                ]
              },
              {
                "id": "topographic",
                "title": "Regular topographic style",
                "links": [
                  {
                    "href": "https://example.com/api/1.0/styles/topographic?f=mapbox",
                    "type": "application/vnd.mapbox.style+json",
                    "rel": "stylesheet"
                  },
                  {
                    "href": "https://example.com/api/1.0/styles/topographic?f=sld10",
                    "type": "application/vnd.ogc.sld+xml;version=1.0",
                    "rel": "stylesheet"
                  },
                  {
                    "href": "https://example.com/api/1.0/styles/topographic/metadata?f=json",
                    "type": "application/json",
                    "rel": "describedBy"
                  }
                ]
              }
            ]
          }
        }
      },
      "style-set-entry": {
        "type": "object",
        "nullable": true,
        "required": [
          "id",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "nullable": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      }
    }
  }
}
