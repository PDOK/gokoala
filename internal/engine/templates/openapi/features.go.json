{{- /*gotype: github.com/PDOK/gokoala/internal/engine.TemplateData*/ -}}
{{ $cfg := .Config }}
{
  "openapi": "3.0.2",
  "info": {
    "title": "Building Blocks specified in the OGC API - Features - Part 1: Core corrigendum standard",
    "description": "Common components used in the\n[\"OGC API - Features - Part 1: Core corrigendum standard\"](https://docs.opengeospatial.org/is/17-069r4/17-069r4.html).\n\nOGC API - Features - Part 1: Core corrigendum 1.0.1 is an OGC Standard.\nCopyright (c) 2022 Open Geospatial Consortium.\nTo obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .\n\nThis is an informative document. The building blocks in this document are also available on the\n[OGC](http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml) schema repository.",
    "license": {
      "name": "OGC License",
      "url": "http://www.opengeospatial.org/legal/"
    },
    "version": "1.0.1"
  },
  "paths": {
    {{- range $index, $coll := .Config.OgcAPI.Features.Collections -}}
    {{- if $index -}},{{- end -}}
    "/collections/{{ $coll.ID }}/items": {
      "get": {
        "tags" : [ "Features" ],
        "summary": "fetch features",
        "description": "Fetch features of the feature collection with id `{{ $coll.ID }}`.\n\nEvery feature in a dataset belongs to a collection. A dataset may\nconsist of multiple feature collections. A feature collection is often a\ncollection of features of a similar type, based on a common schema.\n\nUse content negotiation to request HTML or GeoJSON.",
        "operationId": "{{ $coll.ID }}.getFeatures",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-features"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "$ref": "#/components/parameters/bbox-crs"
          },
          {{ if and $coll.Metadata $coll.Metadata.TemporalProperties}}
          {
            "$ref": "#/components/parameters/datetime"
          },
          {{ else }}
          {
            "$ref": "#/components/parameters/datetime_notsupported"
          },
          {{ end }}
          {
            "$ref": "#/components/parameters/cursor"
          }
          {{ if and $.Params $.Params.PropertyFiltersByCollection }}
            {{- range $pfColl, $propFilters := $.Params.PropertyFiltersByCollection -}}
              {{ if eq $coll.ID $pfColl }}
                {{- range $propFilter := $propFilters -}}
                ,{
                  "name": "{{ $propFilter.Name }}",
                  "in": "query",
                  "description": "{{ $propFilter.Description }}",
                  "required": false,
                  "style": "form",
                  "explode": false,
                  "schema": {
                    "type": "{{ $propFilter.DataType }}"
                    {{/* only allow enum restriction for strings */}}
                    {{ if and (eq $propFilter.DataType "string") (not (empty $propFilter.AllowedValues)) }}
                    ,"enum": [
                      {{- range $index, $allowedValue := $propFilter.AllowedValues -}}
                        {{if $index}},{{end}}
                        "{{ $allowedValue }}"
                      {{- end -}}
                    ]
                    {{ end }}
                  }
                }
                {{ end }}
              {{ end }}
            {{ end }}
          {{ end }}
        ],
        "responses": {
          "200": {
            "description": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, the API supports\npaged access with links to the next page, if more features are selected\nthat the page size.\n\nThe `bbox` and `datetime` parameter can be used to select only a\nsubset of the features in the collection (the features that are in the\nbounding box or time interval). The `bbox` parameter matches all features\nin the collection that are not associated with a location, too. The\n`datetime` parameter matches all features in the collection that are\nnot associated with a time stamp or interval, too.\n\nThe `limit` parameter may be used to control the subset of the\nselected features that should be returned in the response, the page size.\nEach page may include information about the number of selected and\nreturned features (`numberMatched` and `numberReturned`) as well as\nlinks to support paging (link relation `next`).",
            "headers": {
              "Content-Crs": {
                "description": "a URI, in angular brackets, identifying the coordinate reference system used in the content / payload",
                "schema": {
                  "type": "string"
                },
                "example": "<http://www.opengis.net/def/crs/EPSG/0/3395>"
              }
            },
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureCollectionGeoJSON_{{ $coll.ID }}"
                }
              },
              "application/vnd.ogc.fg+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureCollectionJSONFG_{{ $coll.ID }}"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {{block "problems" . }}{{end}}
        }
      }
    },
    "/collections/{{ $coll.ID }}/items/{featureId}": {
      "get": {
        "tags" : [ "Features" ],
        "summary": "fetch a single feature",
        "description": "Fetch the feature with id `featureId` in the feature collection\nwith id `{{ $coll.ID }}`.\n\nUse content negotiation to request HTML or GeoJSON.",
        "operationId": "{{ $coll.ID }}.getFeature",
        "parameters": [
          {
            "name": "featureId",
            "in": "path",
            "description": "local identifier of a feature",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/f-features"
          },
          {
            "$ref": "#/components/parameters/crs"
          }
        ],
        "responses": {
          "200": {
            "description": "fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`",
            "headers": {
              "Content-Crs": {
                "description": "a URI, in angular brackets, identifying the coordinate reference system used in the content / payload",
                "schema": {
                  "type": "string"
                },
                "example": "<http://www.opengis.net/def/crs/EPSG/0/3395>"
              }
            },
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureGeoJSON_{{ $coll.ID }}"
                }
              },
              "application/vnd.ogc.fg+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureJSONFG_{{ $coll.ID }}"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {{block "problems" . }}{{end}}
        }
      }
    },
    "/collections/{{ $coll.ID }}/schema": {
      "get": {
        "tags" : [ "Features" ],
        "summary": "fetch the schema of this collection",
        "description": "Fetch the schema of the collection with id `{{ $coll.ID }}`. The schema describes the features such as the available fields and data types.\n\nUse content negotiation to request HTML or JSON schema.",
        "operationId": "{{ $coll.ID }}.getSchema",
        "parameters": [
          {
            "$ref": "#/components/parameters/f"
          }
        ],
        "responses": {
          "200": {
            "description": "The response is a document containing the schema that describes the features in this collection.",
            "content": {
              "application/schema+json": {
                "schema": {
                  "$ref": "#/components/schemas/jsonSchema"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {{block "problems" . }}{{end}}
        }
      }
    }
    {{ end }}
  },
  "components": {
    "schemas": {
      "extent": {
        "type": "object",
        "properties": {
          "spatial": {
            "$ref": "#/components/schemas/extent_spatial"
          },
          "temporal": {
            "$ref": "#/components/schemas/extent_temporal"
          }
        },
        "description": "The extent of the features in the collection. In the Core only spatial and temporal\nextents are specified. Extensions may add additional members to represent other\nextents, for example, thermal or pressure ranges."
      },
      {{- range $index, $coll := .Config.OgcAPI.Features.Collections -}}
      {{- if $index -}},{{- end -}}
      "featureCollectionJSONFG_{{ $coll.ID }}": {
        "required": [
          "features",
          "type"
        ],
        "type": "object",
        "properties": {
          "conformsTo": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "coordRefSys": {
            "type": "string",
            "format": "uri"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureJSONFG_{{ $coll.ID }}"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          },
          "timeStamp": {
            "$ref": "#/components/schemas/timeStamp"
          },
{{/*          "numberMatched": {*/}}
{{/*            "$ref": "#/components/schemas/numberMatched"*/}}
{{/*          },*/}}
          "numberReturned": {
            "$ref": "#/components/schemas/numberReturned"
          }
        }
      }
      {{- end -}}
      ,
      {{- range $index, $coll := .Config.OgcAPI.Features.Collections -}}
      {{- if $index -}},{{- end -}}
      "featureCollectionGeoJSON_{{ $coll.ID }}": {
        "required": [
          "features",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FeatureCollection"
            ]
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureGeoJSON_{{ $coll.ID }}"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          },
          "timeStamp": {
            "$ref": "#/components/schemas/timeStamp"
          },
{{/*          "numberMatched": {*/}}
{{/*            "$ref": "#/components/schemas/numberMatched"*/}}
{{/*          },*/}}
          "numberReturned": {
            "$ref": "#/components/schemas/numberReturned"
          }
        }
      }
      {{ end }}
      ,
      {{- range $index, $coll := .Config.OgcAPI.Features.Collections -}}
      {{- if $index -}},{{- end -}}
      "featureJSONFG_{{ $coll.ID }}": {
        "required": [
            "time",
            "place",
            "geometry",
            "properties",
            "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Feature"
            ]
          },
          "conformsTo": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "coordRefSys": {
            "type": "string",
            "format": "uri"
          },
          "time": {
            {{/* not implemented yet, since we don't yet support temporal data */}}
            "nullable": true
          },
          "place": {
            "nullable": true,
            "allOf": [
              {{/* 3D conformance class not implemented, so just delegate to GeoJSON compatible geometries */}}
              {
                "$ref": "#/components/schemas/geometryGeoJSON"
              }
            ]
          },
          "geometry": {
            "nullable": true,
            "allOf": [
              {{/* 3D conformance class not implemented, so just delegate to GeoJSON compatible geometries */}}
              {
                "$ref": "#/components/schemas/geometryGeoJSON"
              }
            ]
          },
          "properties": {
            "$ref": "#/components/schemas/propertiesGeoJSON_{{ $coll.ID }}"
          },
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      }
      {{- end -}}
      ,
      {{- range $index, $coll := .Config.OgcAPI.Features.Collections -}}
      {{- if $index -}},{{- end -}}
      "featureGeoJSON_{{ $coll.ID }}": {
        "required": [
          "geometry",
          "properties",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Feature"
            ]
          },
          "geometry": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/geometryGeoJSON"
              }
            ]
          },
          "properties": {
            "$ref": "#/components/schemas/propertiesGeoJSON_{{ $coll.ID }}"
          },
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      }
      {{ end }}
      ,
      {{- range $index, $coll := .Config.OgcAPI.Features.Collections -}}
      {{- if $index -}},{{- end -}}
      "propertiesGeoJSON_{{ $coll.ID }}": {
        "type": "object",
        "properties": {
          {{ if and $.Params $.Params.SchemasByCollection -}}
            {{ range $schemaColl, $schema := $.Params.SchemasByCollection -}}
              {{ if eq $coll.ID $schemaColl -}}

                {{ $firstProp := true -}}
                {{ range $index, $schemaField := $schema.Fields -}}
                  {{/* Skip feature id and external feature id fields, since we don't include those directly. */}}
                  {{/* We always use an 'id' field as required by GeoJSON / JSON-FG.*/}}
                  {{ if $schemaField.IsFid -}}
                    {{ continue }}
                  {{ end -}}
                  {{ if $schemaField.IsExternalFid -}}
                    {{ continue }}
                  {{ end -}}
                  {{/* Skip geometry fields, since we don't include those directly. */}}
                  {{/* We always use an 'geometry' field as required by GeoJSON / JSON-FG.*/}}
                  {{ if $schemaField.IsPrimaryGeometry -}}
                    {{ continue }}
                  {{ end -}}

                  {{/* Avoid first comma */}}
                  {{ if not $firstProp }},{{ else }}{{ $firstProp = false }}{{ end }}

                  "{{ $schemaField.Name }}": {
                    {{ $typeFormat := $schemaField.ToTypeFormat -}}
                    "type": "{{ $typeFormat.Type }}",
                    {{ if $typeFormat.Format }}"format": "{{ $typeFormat.Format }}", {{ end }}
                    "nullable": {{ not $schemaField.IsRequired }},
                    "description": "{{ $schemaField.Description }}"
                  }
                {{ end -}}

              {{ end -}}
            {{ end -}}
          {{ end -}}
        }
      }
      {{- end -}}
      ,
      "geometryGeoJSON": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/pointGeoJSON"
          },
          {
            "$ref": "#/components/schemas/multipointGeoJSON"
          },
          {
            "$ref": "#/components/schemas/linestringGeoJSON"
          },
          {
            "$ref": "#/components/schemas/multilinestringGeoJSON"
          },
          {
            "$ref": "#/components/schemas/polygonGeoJSON"
          },
          {
            "$ref": "#/components/schemas/multipolygonGeoJSON"
          },
          {
            "$ref": "#/components/schemas/geometrycollectionGeoJSON"
          }
        ]
      },
      "geometrycollectionGeoJSON": {
        "required": [
          "geometries",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "GeometryCollection"
            ]
          },
          "geometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/geometryGeoJSON"
            }
          }
        }
      },
      "linestringGeoJSON": {
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LineString"
            ]
          },
          "coordinates": {
            "minItems": 2,
            "type": "array",
            "items": {
              "minItems": 2,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      },
      "multilinestringGeoJSON": {
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiLineString"
            ]
          },
          "coordinates": {
            "type": "array",
            "items": {
              "minItems": 2,
              "type": "array",
              "items": {
                "minItems": 2,
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "multipointGeoJSON": {
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiPoint"
            ]
          },
          "coordinates": {
            "type": "array",
            "items": {
              "minItems": 2,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      },
      "multipolygonGeoJSON": {
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MultiPolygon"
            ]
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "minItems": 4,
                "type": "array",
                "items": {
                  "minItems": 2,
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      },
{{/*      "numberMatched": {*/}}
{{/*        "minimum": 0,*/}}
{{/*        "type": "integer",*/}}
{{/*        "description": "The number of features of the feature type that match the selection\nparameters like `bbox`.",*/}}
{{/*        "example": 127*/}}
{{/*      },*/}}
      "numberReturned": {
        "minimum": 0,
        "type": "integer",
        "description": "The number of features in the feature collection.\n\nA server may omit this information in a response, if the information\nabout the number of features is not known or difficult to compute.\n\nIf the value is provided, the value shall be identical to the number\nof items in the \"features\" array.",
        "example": 10
      },
      "pointGeoJSON": {
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Point"
            ]
          },
          "coordinates": {
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "polygonGeoJSON": {
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Polygon"
            ]
          },
          "coordinates": {
            "type": "array",
            "items": {
              "minItems": 4,
              "type": "array",
              "items": {
                "minItems": 2,
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "timeStamp": {
        "type": "string",
        "description": "This property indicates the time and date when the response was generated.",
        "format": "date-time",
        "example": "2017-08-17T08:05:32Z"
      },
      "extent_spatial": {
        "type": "object",
        "properties": {
          "bbox": {
            "minItems": 1,
            "type": "array",
            "description": "One or more bounding boxes that describe the spatial extent of the dataset.",
            "items": {
              "type": "array",
              "description": "Each bounding box is provided as four or six numbers, depending on\nwhether the coordinate reference system includes a vertical axis\n(height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nThe coordinate reference system of the values is WGS 84 longitude/latitude\n(http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate\nreference system is specified in `crs`.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.\nThe given coordinates should be separated by commas.",
              "example": [
                -180,
                -90,
                180,
                90
              ],
              "items": {
                "type": "number"
              }
            }
          },
          "crs": {
            "type": "string",
            "description": "Coordinate reference system of the coordinates in the spatial extent\n(property `bbox`). The default reference system is WGS 84 longitude/latitude.\nIn the Core this is the only supported coordinate reference system.\nExtensions may support additional coordinate reference systems and add\nadditional enum values.",
            "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "enum": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            ]
          }
        },
        "description": "The spatial extent of the features in the collection."
      },
      "extent_temporal": {
        "type": "object",
        "properties": {
          "interval": {
            "minItems": 1,
            "type": "array",
            "description": "One or more time intervals that describe the temporal extent of the dataset.\nThe value `null` is supported and indicates an unbounded interval end.\nIn the Core only a single time interval is supported. Extensions may support\nmultiple intervals. If multiple intervals are provided, the union of the\nintervals describes the temporal extent.",
            "items": {
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "description": "Begin and end times of the time interval. The timestamps are in the\ntemporal coordinate reference system specified in `trs`. By default\nthis is the Gregorian calendar.",
              "example": [
                "2011-11-11T12:22:11Z",
                null
              ],
              "items": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          },
          "trs": {
            "type": "string",
            "description": "Coordinate reference system of the coordinates in the temporal extent\n(property `interval`). The default reference system is the Gregorian calendar.\nIn the Core this is the only supported temporal coordinate reference system.\nExtensions may support additional temporal coordinate reference systems and add\nadditional enum values.",
            "default": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian",
            "enum": [
              "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
            ]
          }
        },
        "description": "The temporal extent of the features in the collection."
      },
      "jsonSchema": {
        "required": [
          "type",
          "$id",
          "$schema"
        ],
        "type": "object",
        "description": "A JSON Schema definition",
        "properties": {
          "$id": {
            "type": "string",
            "description": "URI that serves as the schema identifier"
          },
          "$schema": {
            "type": "string",
            "description": "URI that identifies the JSON Schema version"
          },
          "title": {
            "type": "string",
            "description": "Human-readable title of the schema"
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the schema"
          },
          "type": {
            "type": "string"
          },
          "required": {
            "type": "array",
            "description": "List of required property names",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "description": "Schema for object properties"
          }
        }
      }
    },
    "parameters": {
      "bbox": {
        "name": "bbox",
        "in": "query",
        "description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four numbers\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n\nThe coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.\nThe given coordinates should be separated by commas.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "minItems": 4,
          "maxItems": 6,
          "items": {
            "type": "number"
          }
        }
{{/* Replace schema with the following once https://github.com/opengeospatial/ets-ogcapi-features10/issues/223 is fixed*/}}
{{/* */}}
{{/*        "schema": {*/}}
{{/*          "type": "array",*/}}
{{/*          "oneOf": [*/}}
{{/*            {*/}}
{{/*              "maxItems": 4,*/}}
{{/*              "minItems": 4*/}}
{{/*            },*/}}
{{/*            {*/}}
{{/*              "maxItems": 6,*/}}
{{/*              "minItems": 6*/}}
{{/*            }*/}}
{{/*          ],*/}}
{{/*          "items": {*/}}
{{/*            "type": "number",*/}}
{{/*            "format": "double"*/}}
{{/*          }*/}}
{{/*        }*/}}
      },
      "bbox-crs": {
        "name": "bbox-crs",
        "in": "query",
        "description": "The coordinate reference system of the `bbox` parameter. Default is WGS84 longitude/latitude.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uri",
          "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
          "enum": [
            "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            {{ range $index, $srs := .Config.OgcAPI.Features.ProjectionsForCollections }}
            ,"http://www.opengis.net/def/crs/EPSG/0/{{ trimPrefix "EPSG:" $srs }}"
            {{ end }}
          ]
        },
        "style": "form",
        "explode": false
      },
      "crs": {
        "name": "crs",
        "in": "query",
        "description": "The coordinate reference system of the geometries in the response. Default is WGS84 longitude/latitude",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uri",
          "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
          "enum": [
            "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            {{ range $index, $srs := .Config.OgcAPI.Features.ProjectionsForCollections }}
            ,"http://www.opengis.net/def/crs/EPSG/0/{{ trimPrefix "EPSG:" $srs }}"
            {{ end }}
          ]
        },
        "style": "form",
        "explode": false
      },
      "collectionId": {
        "name": "collectionId",
        "in": "path",
        "description": "local identifier of a collection",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "datetime": {
        "name": "datetime",
        "in": "query",
        "description": "A date-time (intervals are currently not supported). Date and time expressions adhere to RFC 3339.\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "datetime_notsupported": {
        "name": "datetime",
        "in": "query",
        "description": "__The `datetime` parameter is not currently supported for this collection__",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "featureId": {
        "name": "featureId",
        "in": "path",
        "description": "local identifier of a feature",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 1000. Default = 10.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "maximum": {{ $cfg.OgcAPI.Features.Limit.Max }},
          "minimum": 1,
          "type": "integer",
          "default": {{ $cfg.OgcAPI.Features.Limit.Default }}
        }
      },
      "cursor": {
        "name": "cursor",
        "in": "query",
        "description": "The optional cursor parameter identifies the page in the features result set. You shouldn't specify the cursor value yourself, instead you should obtain the cursor value from the `next`-link in the features response.\n\nThis API uses \"_cursor-based pagination_\" which has the advantage of allowing users to pagination though all features regardless of the size of the dataset. This wouldn't be possible using traditional \"_offset-based pagination_\".",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "f-features": {
        "description": "The optional f parameter indicates the output format that the server shall provide as part of the response document.  The default format is JSON.",
        "explode": false,
        "in": "query",
        "name": "f",
        "required": false,
        "schema": {
          "default": "json",
          "enum": [
            "json",
            "jsonfg",
            "html"
          ],
          "type": "string"
        },
        "style": "form"
      }
    }
  }
}
